{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JavaScript: Estudo e Exercicios Site para ajudar nos meus estudos em JavaScript, e posteriormente poder revisar algo que eu precise relembrar. Dividirei os estudos em partes, sendo : 1 a Parte : In\u00edcio Vari\u00e1veis N\u00fameros e Operadores Boolean e Condicionais Fun\u00e7\u00f5es Objetos Array e Loop Atribui\u00e7\u00e3o e Tern\u00e1rio Escopo 2 a Parte : DOM O que \u00e9 DOM Sele\u00e7\u00e3o de Elementos forEach e ArrowFunction Classes e Atributos Dimens\u00f5es e Dist\u00e2ncias Evento Traversing e Manipula\u00e7\u00e3o Navega\u00e7\u00e3o por Tabs 3 a Parte Constructor Function Prototype Native, Host e User string Number e Math Array Array e Itera\u00e7\u00e3o Function Object","title":"Introdu\u00e7\u00e3o"},{"location":"#javascript-estudo-e-exercicios","text":"Site para ajudar nos meus estudos em JavaScript, e posteriormente poder revisar algo que eu precise relembrar. Dividirei os estudos em partes, sendo : 1 a Parte : In\u00edcio Vari\u00e1veis N\u00fameros e Operadores Boolean e Condicionais Fun\u00e7\u00f5es Objetos Array e Loop Atribui\u00e7\u00e3o e Tern\u00e1rio Escopo 2 a Parte : DOM O que \u00e9 DOM Sele\u00e7\u00e3o de Elementos forEach e ArrowFunction Classes e Atributos Dimens\u00f5es e Dist\u00e2ncias Evento Traversing e Manipula\u00e7\u00e3o Navega\u00e7\u00e3o por Tabs 3 a Parte Constructor Function Prototype Native, Host e User string Number e Math Array Array e Itera\u00e7\u00e3o Function Object","title":"JavaScript: Estudo e Exercicios"},{"location":"parte1/array/","text":"Array e Loops Array \u00c9 um grupo de valores geralmente relacionados. Servem para guardarmos diferentes valores em uma \u00fanica vari\u00e1vel. var videoGames = [ 'Switch' , 'PS4' , 'XBox' ]; videoGames [ 0 ] // Switch videoGames [ 2 ] // Xbox Info Acesse um elemento da array utilizando [n] M\u00e9todos e Propriedade de um Array var videoGames = [ 'Switch' , 'PS4' , 'XBox' ]; videoGames . pop (); // Remove o \u00faltimo item e retorna ele videoGames . push ( '3DS' ); // Adiciona ao final da array videoGames . length ; // 3 Info Existem diversos outros m\u00e9todos, como map , reduce , forEach e mais que veremos mais \u00e0 frente Loop For Fazem algo repetidamente at\u00e9 que uma condi\u00e7\u00e3o seja atingida. for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } // Retorna de 0 a 9 no console Info O for loop possui 3 partes, in\u00edcio , condi\u00e7\u00e3o e incremento Loop While var i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; } // Retorna de 0 a 9 no console !note O loop for \u00e9 o mais comum Arrays e Loops var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); } Break O loop ir\u00e1 parar caso encontro e palavra break var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); if ( videoGames [ i ] === 'PS4' ) { break ; } } For Each forEach \u00e9 um m\u00e9todo que executa uma fun\u00e7\u00e3o para cada item do Array. \u00c9 uma forma mais simples de utilizarmos um loop com arrays (ou array-like) var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; videoGames . forEach ( function ( item ) { console . log ( item ); }); // O argumento item ser\u00e1 atribu\u00eddo dinamicamente Info Podemos passar os seguintes par\u00e2metros item , index e array","title":"Array"},{"location":"parte1/array/#array-e-loops","text":"","title":"Array e Loops"},{"location":"parte1/array/#array","text":"\u00c9 um grupo de valores geralmente relacionados. Servem para guardarmos diferentes valores em uma \u00fanica vari\u00e1vel. var videoGames = [ 'Switch' , 'PS4' , 'XBox' ]; videoGames [ 0 ] // Switch videoGames [ 2 ] // Xbox Info Acesse um elemento da array utilizando [n]","title":"Array"},{"location":"parte1/array/#metodos-e-propriedade-de-um-array","text":"var videoGames = [ 'Switch' , 'PS4' , 'XBox' ]; videoGames . pop (); // Remove o \u00faltimo item e retorna ele videoGames . push ( '3DS' ); // Adiciona ao final da array videoGames . length ; // 3 Info Existem diversos outros m\u00e9todos, como map , reduce , forEach e mais que veremos mais \u00e0 frente","title":"M\u00e9todos e Propriedade de um Array"},{"location":"parte1/array/#loop-for","text":"Fazem algo repetidamente at\u00e9 que uma condi\u00e7\u00e3o seja atingida. for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } // Retorna de 0 a 9 no console Info O for loop possui 3 partes, in\u00edcio , condi\u00e7\u00e3o e incremento","title":"Loop For"},{"location":"parte1/array/#loop-while","text":"var i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; } // Retorna de 0 a 9 no console !note O loop for \u00e9 o mais comum","title":"Loop While"},{"location":"parte1/array/#arrays-e-loops","text":"var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); }","title":"Arrays e Loops"},{"location":"parte1/array/#break","text":"O loop ir\u00e1 parar caso encontro e palavra break var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); if ( videoGames [ i ] === 'PS4' ) { break ; } }","title":"Break"},{"location":"parte1/array/#for-each","text":"forEach \u00e9 um m\u00e9todo que executa uma fun\u00e7\u00e3o para cada item do Array. \u00c9 uma forma mais simples de utilizarmos um loop com arrays (ou array-like) var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; videoGames . forEach ( function ( item ) { console . log ( item ); }); // O argumento item ser\u00e1 atribu\u00eddo dinamicamente Info Podemos passar os seguintes par\u00e2metros item , index e array","title":"For Each"},{"location":"parte1/boolean/","text":"Boolean e Condicionais Boolean Existem dois valores booleanos false ou true var possuiGraduacao = true ; var possuiDoutorado = false ; Condicionais If e Else Verificar se uma express\u00e3o \u00e9 verdadeira com if , caso o contr\u00e1rio o else ser\u00e1 ativado. var possuiGraduacao = true ; if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } // retorna Possui Gradua\u00e7\u00e3o e n\u00e3o executa o else Informa\u00e7\u00e3o O valor dentro dos par\u00eanteses sempre ser\u00e1 avaliado em false ou true . Condicional Else If Se o if n\u00e3o for verdadeiro, ele testa o else if var possuiGraduacao = true ; var possuiDoutorado = false ; if ( possuiDoutorado ) { console . log ( 'Possui gradua\u00e7\u00e3o e doutorado' ); } else if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } // retorna Possui Gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado Switch Com o switch voc\u00ea pode verificar se uma vari\u00e1vel \u00e9 igual \u00e0 diferentes valores utilizando o case . Caso ela seja igual, voc\u00ea pode fazer alguma coisa e utilizar a palavra chave break para cancelar a continua\u00e7\u00e3o. O valor de dafult ocorrer\u00e1 caso nenhuma das anteriores seja verdadeira. var corFavorita = 'Azul' ; switch ( corFavorita ) { case 'Azul' : console . log ( 'Olhe para o c\u00e9u.' ); break ; case 'Vermelho' : console . log ( 'Olhe para rosas.' ); break ; case 'Amarelo' : console . log ( 'Olhe para o sol.' ); break ; default : console . log ( 'Feche os olhos' ); } Truthy e Falsy Existem valores que retornam true e outros que retornam false quando verificados em uma express\u00e3o booleana. // Falsy if ( false ) if ( 0 ) // ou -0 if ( NaN ) if ( null ) if ( undefined ) if ( '' ) // ou \"\" ou `` Info Todo o resto \u00e9 truthy Truthy // Truthy if ( true ) if ( 1 ) if ( ' ' ) if ( 'andre' ) if ( - 5 ) if ({}) Operador L\u00f3gico de Nega\u00e7\u00e3o (!) O operador ! nega uma opera\u00e7\u00e3o booleana. Ou seja, ! true \u00e9 a igual a false // Truthy if ( ! true ) // false if ( ! 1 ) // false if ( ! '' ) // true if ( ! undefined ) // true if ( !! ' ' ) // true if ( !! '' ) // false Dica Pode utilizar o !! para verificar se uma express\u00e3o \u00e9 Truthy ou Falsy Operadores de Compara\u00e7ao V\u00e3o sempre retornar um valor booleano 10 > 5 ; // true 5 > 10 ; // false 20 < 10 ; // false 10 <= 10 // true 10 >= 11 // false Operadores de Compara\u00e7ao O == faz uma compara\u00e7\u00e3o n\u00e3o t\u00e3o estrita e o === faz uma compara\u00e7\u00e3o estrita, ou seja, o tipo de dado deve ser o mesmo quando usamos === 10 == '10' ; // true 10 == 10 ; // true 10 === '10' ; // false 10 === 10 // true 10 != 15 // true 10 != '10' // false 10 !== '10' // true Operadores L\u00f3gicos && && Compara se uma express\u00e3o e outra \u00e9 verdadeira true && true ; // true true && false ; // false false && true ; // false 'Gato' && 'C\u00e3o' ; // 'C\u00e3o' ( 5 - 5 ) && ( 5 + 5 ); // 0 'Gato' && false ; // false ( 5 >= 5 ) && ( 3 < 6 ); // true Info Se ambos os valores forem true ele ir\u00e1 retornar o \u00faltimo valor verificado se algum valor for false ele ir\u00e1 retornar o mesmo e n\u00e3o ir\u00e1 continuar a verificar o pr\u00f3ximo Operadores L\u00f3gicos || || Compara se uma express\u00e3o ou outra \u00e9 verdadeira true || true ; // true true || false ; // true false || true ; // true 'Gato' || 'C\u00e3o' ; // 'Gato' ( 5 - 5 ) || ( 5 + 5 ); // 10 'Gato' || false ; // Gato ( 5 >= 5 ) || ( 3 < 6 ); // true Info Retorna o primeiro valor true que encontrar","title":"Boolean e Condicionais"},{"location":"parte1/boolean/#boolean-e-condicionais","text":"","title":"Boolean e Condicionais"},{"location":"parte1/boolean/#boolean","text":"Existem dois valores booleanos false ou true var possuiGraduacao = true ; var possuiDoutorado = false ;","title":"Boolean"},{"location":"parte1/boolean/#condicionais-if-e-else","text":"Verificar se uma express\u00e3o \u00e9 verdadeira com if , caso o contr\u00e1rio o else ser\u00e1 ativado. var possuiGraduacao = true ; if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } // retorna Possui Gradua\u00e7\u00e3o e n\u00e3o executa o else Informa\u00e7\u00e3o O valor dentro dos par\u00eanteses sempre ser\u00e1 avaliado em false ou true .","title":"Condicionais If e Else"},{"location":"parte1/boolean/#condicional-else-if","text":"Se o if n\u00e3o for verdadeiro, ele testa o else if var possuiGraduacao = true ; var possuiDoutorado = false ; if ( possuiDoutorado ) { console . log ( 'Possui gradua\u00e7\u00e3o e doutorado' ); } else if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } // retorna Possui Gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado","title":"Condicional Else If"},{"location":"parte1/boolean/#switch","text":"Com o switch voc\u00ea pode verificar se uma vari\u00e1vel \u00e9 igual \u00e0 diferentes valores utilizando o case . Caso ela seja igual, voc\u00ea pode fazer alguma coisa e utilizar a palavra chave break para cancelar a continua\u00e7\u00e3o. O valor de dafult ocorrer\u00e1 caso nenhuma das anteriores seja verdadeira. var corFavorita = 'Azul' ; switch ( corFavorita ) { case 'Azul' : console . log ( 'Olhe para o c\u00e9u.' ); break ; case 'Vermelho' : console . log ( 'Olhe para rosas.' ); break ; case 'Amarelo' : console . log ( 'Olhe para o sol.' ); break ; default : console . log ( 'Feche os olhos' ); }","title":"Switch"},{"location":"parte1/boolean/#truthy-e-falsy","text":"Existem valores que retornam true e outros que retornam false quando verificados em uma express\u00e3o booleana. // Falsy if ( false ) if ( 0 ) // ou -0 if ( NaN ) if ( null ) if ( undefined ) if ( '' ) // ou \"\" ou `` Info Todo o resto \u00e9 truthy","title":"Truthy e Falsy"},{"location":"parte1/boolean/#truthy","text":"// Truthy if ( true ) if ( 1 ) if ( ' ' ) if ( 'andre' ) if ( - 5 ) if ({})","title":"Truthy"},{"location":"parte1/boolean/#operador-logico-de-negacao","text":"O operador ! nega uma opera\u00e7\u00e3o booleana. Ou seja, ! true \u00e9 a igual a false // Truthy if ( ! true ) // false if ( ! 1 ) // false if ( ! '' ) // true if ( ! undefined ) // true if ( !! ' ' ) // true if ( !! '' ) // false Dica Pode utilizar o !! para verificar se uma express\u00e3o \u00e9 Truthy ou Falsy","title":"Operador L\u00f3gico de Nega\u00e7\u00e3o (!)"},{"location":"parte1/boolean/#operadores-de-comparacao","text":"V\u00e3o sempre retornar um valor booleano 10 > 5 ; // true 5 > 10 ; // false 20 < 10 ; // false 10 <= 10 // true 10 >= 11 // false","title":"Operadores de Compara\u00e7ao"},{"location":"parte1/boolean/#operadores-de-comparacao_1","text":"O == faz uma compara\u00e7\u00e3o n\u00e3o t\u00e3o estrita e o === faz uma compara\u00e7\u00e3o estrita, ou seja, o tipo de dado deve ser o mesmo quando usamos === 10 == '10' ; // true 10 == 10 ; // true 10 === '10' ; // false 10 === 10 // true 10 != 15 // true 10 != '10' // false 10 !== '10' // true","title":"Operadores de Compara\u00e7ao"},{"location":"parte1/boolean/#operadores-logicos","text":"&& Compara se uma express\u00e3o e outra \u00e9 verdadeira true && true ; // true true && false ; // false false && true ; // false 'Gato' && 'C\u00e3o' ; // 'C\u00e3o' ( 5 - 5 ) && ( 5 + 5 ); // 0 'Gato' && false ; // false ( 5 >= 5 ) && ( 3 < 6 ); // true Info Se ambos os valores forem true ele ir\u00e1 retornar o \u00faltimo valor verificado se algum valor for false ele ir\u00e1 retornar o mesmo e n\u00e3o ir\u00e1 continuar a verificar o pr\u00f3ximo","title":"Operadores L\u00f3gicos &amp;&amp;"},{"location":"parte1/boolean/#operadores-logicos_1","text":"|| Compara se uma express\u00e3o ou outra \u00e9 verdadeira true || true ; // true true || false ; // true false || true ; // true 'Gato' || 'C\u00e3o' ; // 'Gato' ( 5 - 5 ) || ( 5 + 5 ); // 10 'Gato' || false ; // Gato ( 5 >= 5 ) || ( 3 < 6 ); // true Info Retorna o primeiro valor true que encontrar","title":"Operadores L\u00f3gicos ||"},{"location":"parte1/comentario/","text":"Atribui\u00e7\u00e3o e Tern\u00e1rio Coment\u00e1rios // Coment\u00e1rio de uma linha /* Coment\u00e1rio com diversas linhas */ // var nome = 'Andr\u00e9'; Dicas Comentar uma linha de c\u00f3digo desativa a mesma. N\u00e3o deixe linhas de c\u00f3digo comentadas no arquivo final. Operadores de Atribui\u00e7\u00e3o Podem funcionar como formas abreviadas var x = 5 ; var y = 10 ; x += y ; // x = x + y (15) x -= y ; // x = x - y (-5) x *= y ; // x = x * y (50) x /= y ; // x = x / y (0.5) x %= y ; // x = x % y (0) x **= y ; // x = x ** y (9765625) Operador Tern\u00e1rio Abrevia\u00e7\u00e3o de condicionais com !#javascript if e !#javascript else var idade = 19 ; var podeBeber = ( idade >= 18 ) ? 'Pode beber' : 'N\u00e3o pode beber' ; console . log ( podeBeber ) // Pode beber // condi\u00e7\u00e3o ? true : false Info Geralmente utilizado quando precisamos atribuir um valor para uma vari\u00e1vel, dependendo de uma condi\u00e7\u00e3o If Abreviado N\u00e3o \u00e9 necess\u00e1rio abrir e fechar as chaves {} quando retornamos apenas uma linha de c\u00f3digo var possuiFaculdade = true ; if ( possuiFaculdade ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); // ou if ( possuiFaculdade ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' );","title":"Atribui\u00e7\u00e3o e Tern\u00e1rio"},{"location":"parte1/comentario/#atribuicao-e-ternario","text":"","title":"Atribui\u00e7\u00e3o e Tern\u00e1rio"},{"location":"parte1/comentario/#comentarios","text":"// Coment\u00e1rio de uma linha /* Coment\u00e1rio com diversas linhas */ // var nome = 'Andr\u00e9'; Dicas Comentar uma linha de c\u00f3digo desativa a mesma. N\u00e3o deixe linhas de c\u00f3digo comentadas no arquivo final.","title":"Coment\u00e1rios"},{"location":"parte1/comentario/#operadores-de-atribuicao","text":"Podem funcionar como formas abreviadas var x = 5 ; var y = 10 ; x += y ; // x = x + y (15) x -= y ; // x = x - y (-5) x *= y ; // x = x * y (50) x /= y ; // x = x / y (0.5) x %= y ; // x = x % y (0) x **= y ; // x = x ** y (9765625)","title":"Operadores de Atribui\u00e7\u00e3o"},{"location":"parte1/comentario/#operador-ternario","text":"Abrevia\u00e7\u00e3o de condicionais com !#javascript if e !#javascript else var idade = 19 ; var podeBeber = ( idade >= 18 ) ? 'Pode beber' : 'N\u00e3o pode beber' ; console . log ( podeBeber ) // Pode beber // condi\u00e7\u00e3o ? true : false Info Geralmente utilizado quando precisamos atribuir um valor para uma vari\u00e1vel, dependendo de uma condi\u00e7\u00e3o","title":"Operador Tern\u00e1rio"},{"location":"parte1/comentario/#if-abreviado","text":"N\u00e3o \u00e9 necess\u00e1rio abrir e fechar as chaves {} quando retornamos apenas uma linha de c\u00f3digo var possuiFaculdade = true ; if ( possuiFaculdade ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); // ou if ( possuiFaculdade ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' );","title":"If Abreviado"},{"location":"parte1/escopo/","text":"Escopo Escopo de Fun\u00e7\u00e3o Vari\u00e1veis declaradas dentro de fun\u00e7\u00f5es n\u00e3o s\u00e3o acessadas fora das mesmas. function mostrarCarro () { var carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca no console console . log ( carro ); // Erro, carro is not defined Info Escopo evita o conflito entre nomes. Vari\u00e1vel Global (Erro) Declarar vari\u00e1veis sem a palavra chave var , const ou let , cria uma vari\u00e1vel que pode ser acessar em qualquer escopo (global). Isso \u00e9 um erro. function mostrarCarro () { carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca console . log ( carro ); // Fusca Dica use strict impede isso. Escopo da Fun\u00e7\u00e3o (Pai) Vari\u00e1veis declaradas no escopo pai da fun\u00e7\u00e3o, conseguem ser acessadas pelas fun\u00e7\u00f5es. var carro = 'Fusca' ; function mostrarCarro () { var frase = `Meu carro \u00e9 um ${ carro } ` ; console . log ( frase ); } mostrarCarro (); // Meu carro \u00e9 um Fusca console . log ( carro ); // Fusca Escopo de Bloco Vari\u00e1veis criadas com var , vazam o bloco. Por isso com a introdu\u00e7\u00e3o do ES6 a melhor forma de declarmos uma vari\u00e1vel \u00e9 utilizando const e let , pois estas respeitam o escopo de bloco. if ( true ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // Carro Var Vaza Bloco Mesmo com a condi\u00e7\u00e3o falsa, a vari\u00e1vel ainda ser\u00e1 declarada utilizando hoisting e o valor ficar\u00e1 como undefined. if ( false ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // undefined Const e Let no Lugar de Var A partir de agora vamos utilizar apenas const e let para declarmos vari\u00e1veis. if ( true ) { const carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // erro, carro is not defined { } Cria um Bloco Chaves { } criam um escopo de bloco, n\u00e3o confundir com a cria\u00e7\u00e3o de objetos = { } { var carro = 'Fusca' ; const ano = 2018 ; } console . log ( carro ); // Carro console . log ( ano ); // erro ano is not defined For Loop Ao utilizar var dentro de um for loop, que \u00e9 um bloco, o valor do vari\u00e1vel utilizada ir\u00e1 vazar e existir fora do loop. for ( var i = 0 ; i < 10 ; i ++ ) { console . log ( `N\u00famero ${ i } ` ); } console . log ( i ); // 10 For Loop com Let Com o let evitamos que o n\u00famero vaze. for ( let i = 0 ; i < 10 ; i ++ ) { console . log ( `N\u00famero ${ i } ` ); } console . log ( i ); // i is not defined Const Mant\u00e9m o escopo no bloco, impede a redeclara\u00e7\u00e3o e impede a modifica\u00e7\u00e3o do valor da vari\u00e1vel, evitando bugs no c\u00f3digo. const mes = 'Dezembro' ; mes = 'Janeiro' ; // erro, tentou modificar o valor const semana ; // erro, declarou sem valor const data = { dia : 28 , mes : 'Dezembro' , ano : 2018 , } data . dia = 29 ; // Funciona data = 'Janeiro' ; // erro Info Vari\u00e1veis com valores constantes devem utilizar o const . Let Mant\u00e9m o escopo no bloco, impede a redeclara\u00e7\u00e3o, mas permite a modifica\u00e7\u00e3o do valor da vari\u00e1vel. let ano ; ano = 2018 ; ano ++ ; console . log ( ano ); // 2019 let ano = 2020 ; // erro, redeclarou a vari\u00e1vel dica Geralmente utilizamos o const .","title":"Escopo"},{"location":"parte1/escopo/#escopo","text":"","title":"Escopo"},{"location":"parte1/escopo/#escopo-de-funcao","text":"Vari\u00e1veis declaradas dentro de fun\u00e7\u00f5es n\u00e3o s\u00e3o acessadas fora das mesmas. function mostrarCarro () { var carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca no console console . log ( carro ); // Erro, carro is not defined Info Escopo evita o conflito entre nomes.","title":"Escopo de Fun\u00e7\u00e3o"},{"location":"parte1/escopo/#variavel-global-erro","text":"Declarar vari\u00e1veis sem a palavra chave var , const ou let , cria uma vari\u00e1vel que pode ser acessar em qualquer escopo (global). Isso \u00e9 um erro. function mostrarCarro () { carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca console . log ( carro ); // Fusca Dica use strict impede isso.","title":"Vari\u00e1vel Global (Erro)"},{"location":"parte1/escopo/#escopo-da-funcao-pai","text":"Vari\u00e1veis declaradas no escopo pai da fun\u00e7\u00e3o, conseguem ser acessadas pelas fun\u00e7\u00f5es. var carro = 'Fusca' ; function mostrarCarro () { var frase = `Meu carro \u00e9 um ${ carro } ` ; console . log ( frase ); } mostrarCarro (); // Meu carro \u00e9 um Fusca console . log ( carro ); // Fusca","title":"Escopo da Fun\u00e7\u00e3o (Pai)"},{"location":"parte1/escopo/#escopo-de-bloco","text":"Vari\u00e1veis criadas com var , vazam o bloco. Por isso com a introdu\u00e7\u00e3o do ES6 a melhor forma de declarmos uma vari\u00e1vel \u00e9 utilizando const e let , pois estas respeitam o escopo de bloco. if ( true ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // Carro","title":"Escopo de Bloco"},{"location":"parte1/escopo/#var-vaza-bloco","text":"Mesmo com a condi\u00e7\u00e3o falsa, a vari\u00e1vel ainda ser\u00e1 declarada utilizando hoisting e o valor ficar\u00e1 como undefined. if ( false ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // undefined","title":"Var Vaza Bloco"},{"location":"parte1/escopo/#const-e-let-no-lugar-de-var","text":"A partir de agora vamos utilizar apenas const e let para declarmos vari\u00e1veis. if ( true ) { const carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // erro, carro is not defined","title":"Const e Let no Lugar de Var"},{"location":"parte1/escopo/#cria-um-bloco","text":"Chaves { } criam um escopo de bloco, n\u00e3o confundir com a cria\u00e7\u00e3o de objetos = { } { var carro = 'Fusca' ; const ano = 2018 ; } console . log ( carro ); // Carro console . log ( ano ); // erro ano is not defined","title":"{ } Cria um Bloco"},{"location":"parte1/escopo/#for-loop","text":"Ao utilizar var dentro de um for loop, que \u00e9 um bloco, o valor do vari\u00e1vel utilizada ir\u00e1 vazar e existir fora do loop. for ( var i = 0 ; i < 10 ; i ++ ) { console . log ( `N\u00famero ${ i } ` ); } console . log ( i ); // 10","title":"For Loop"},{"location":"parte1/escopo/#for-loop-com-let","text":"Com o let evitamos que o n\u00famero vaze. for ( let i = 0 ; i < 10 ; i ++ ) { console . log ( `N\u00famero ${ i } ` ); } console . log ( i ); // i is not defined","title":"For Loop com Let"},{"location":"parte1/escopo/#const","text":"Mant\u00e9m o escopo no bloco, impede a redeclara\u00e7\u00e3o e impede a modifica\u00e7\u00e3o do valor da vari\u00e1vel, evitando bugs no c\u00f3digo. const mes = 'Dezembro' ; mes = 'Janeiro' ; // erro, tentou modificar o valor const semana ; // erro, declarou sem valor const data = { dia : 28 , mes : 'Dezembro' , ano : 2018 , } data . dia = 29 ; // Funciona data = 'Janeiro' ; // erro Info Vari\u00e1veis com valores constantes devem utilizar o const .","title":"Const"},{"location":"parte1/escopo/#let","text":"Mant\u00e9m o escopo no bloco, impede a redeclara\u00e7\u00e3o, mas permite a modifica\u00e7\u00e3o do valor da vari\u00e1vel. let ano ; ano = 2018 ; ano ++ ; console . log ( ano ); // 2019 let ano = 2020 ; // erro, redeclarou a vari\u00e1vel dica Geralmente utilizamos o const .","title":"Let"},{"location":"parte1/funcoes/","text":"Fun\u00e7\u00f5es Bloco de c\u00f3digo que pode ser executado e reutilizado. Valores podem ser passados por uma fun\u00e7\u00e3o e a mesma retorna outro valor. function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado ( 4 ) // 16 areaQuadrado ( 5 ) // 25 areaQuadrado ( 2 ) // 4 Info Chamada de function declarativa function pi () { return 3.14 ; } var total = 5 * pi (); // 15.7 Note Par\u00eanteses () executam uma fun\u00e7\u00e3o Par\u00e2metros e Argumentos Ao criar uma fun\u00e7\u00e3o, voc\u00ea pode definir param\u00eatros . Ao executar uma fun\u00e7\u00e3o, voc\u00ea pode passar argumentos . // peso e altura s\u00e3o os par\u00e2metros function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); return imc ; } imc ( 80 , 1.80 ) // 80 e 1.80 s\u00e3o os argumentos imc ( 60 , 1.70 ) // 60 e 1.70 s\u00e3o os argumentos Note Separar por v\u00edrgula cada par\u00e2metro. Voc\u00ea pode definir mais de um par\u00e2metro ou nenhum tamb\u00e9m Par\u00eanteses Executa a Fun\u00e7\u00e3o function corFavorita ( cor ) { if ( cor === 'azul' ) { return 'Voc\u00ea gosta do c\u00e9u' ; } else if ( cor === 'verde' ) { return 'Voc\u00ea gosta de mato' ; } else { return 'Voc\u00ea n\u00e3o gosta de nada' ; } } corFavorita (); // retorna 'Voc\u00ea n\u00e3o gosta de nada' Note Se apenas definirmos a fun\u00e7\u00e3o com o function e n\u00e3o executarmos a mesma, nada que estiver dentro dela ir\u00e1 acontecer Argumentos Podem ser Fun\u00e7\u00f5es Chamadas de Callback, geralmente s\u00e3o fun\u00e7\u00f5es que ocorrem ap\u00f3s algum evento. addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }); // A fun\u00e7\u00e3o possui dois argumentos // Primeiro \u00e9 a string 'click' // Segundo \u00e9 uma fun\u00e7\u00e3o an\u00f4nima Info Fun\u00e7\u00f5es an\u00f4nimas s\u00e3o aquelas em que o nome da fun\u00e7\u00e3o n\u00e3o \u00e9 definido, escritas como function() {} ou () => {} Pode ou n\u00e3o retornar um valor Quando n\u00e3o definimos o return, ela ir\u00e1 retornar undefined . O c\u00f3digo interno da fun\u00e7\u00e3o \u00e9 executado normalmente, independente de existir valor de return ou n\u00e3o. function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); } imc ( 80 , 1.80 ); // retorna o imc console . log ( imc ( 80 , 1.80 )); // retorna o imc e undefined Valores Retornados Uma fun\u00e7\u00e3o pode retornar qualquer tipo de dado e at\u00e9 outras fun\u00e7\u00f5es. function terceiraIdade ( idade ) { if ( typeof idade !== 'number' ) { return 'Informe a sua idade!' ; } else if ( idade >= 60 ) { return true ; } else { return false ; } } Cuidado Retornar diferentes tipos de dados na mesma fun\u00e7\u00e3o n\u00e3o \u00e9 uma boa ideia. Escopo Vari\u00e1veis e fun\u00e7\u00f5es definidas dentro de um bloco {} {}, n\u00e3o s\u00e3o vis\u00edveis fora dele. function precisoVisitar ( paisesVisitados ) { var totalPaises = 193 ; return `Ainda faltam ${ totalPaises - paisesVisitados } paises para visitar` } console . log ( totalPaises ); // erro, totalPaises n\u00e3o definido Escopo L\u00e9xico Fun\u00e7\u00f5es conseguem acessar vari\u00e1veis que foram criadas no contexto pai var profissao = 'Designer' ; function dados () { var nome = 'Andr\u00e9' ; var idade = 28 ; function outrosDados () { var endereco = 'Rio de Janeiro' ; var idade = 29 ; return ` ${ nome } , ${ idade } , ${ endereco } , ${ profissao } ` ; } return outrosDados (); } dados (); // Retorna 'Andr\u00e9, 29, Rio de Janeiro, Designer' outrosDados (); // retorna um erro Hoisting Antes de executar uma fun\u00e7\u00e3o, o JS 'move' todas as fun\u00e7\u00f5es declaradas para a mem\u00f3ria imc ( 80 , 1.80 ); // imc aparece no console function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); }","title":"Fun\u00e7\u00f5es"},{"location":"parte1/funcoes/#funcoes","text":"Bloco de c\u00f3digo que pode ser executado e reutilizado. Valores podem ser passados por uma fun\u00e7\u00e3o e a mesma retorna outro valor. function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado ( 4 ) // 16 areaQuadrado ( 5 ) // 25 areaQuadrado ( 2 ) // 4 Info Chamada de function declarativa function pi () { return 3.14 ; } var total = 5 * pi (); // 15.7 Note Par\u00eanteses () executam uma fun\u00e7\u00e3o","title":"Fun\u00e7\u00f5es"},{"location":"parte1/funcoes/#parametros-e-argumentos","text":"Ao criar uma fun\u00e7\u00e3o, voc\u00ea pode definir param\u00eatros . Ao executar uma fun\u00e7\u00e3o, voc\u00ea pode passar argumentos . // peso e altura s\u00e3o os par\u00e2metros function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); return imc ; } imc ( 80 , 1.80 ) // 80 e 1.80 s\u00e3o os argumentos imc ( 60 , 1.70 ) // 60 e 1.70 s\u00e3o os argumentos Note Separar por v\u00edrgula cada par\u00e2metro. Voc\u00ea pode definir mais de um par\u00e2metro ou nenhum tamb\u00e9m","title":"Par\u00e2metros e Argumentos"},{"location":"parte1/funcoes/#parenteses-executa-a-funcao","text":"function corFavorita ( cor ) { if ( cor === 'azul' ) { return 'Voc\u00ea gosta do c\u00e9u' ; } else if ( cor === 'verde' ) { return 'Voc\u00ea gosta de mato' ; } else { return 'Voc\u00ea n\u00e3o gosta de nada' ; } } corFavorita (); // retorna 'Voc\u00ea n\u00e3o gosta de nada' Note Se apenas definirmos a fun\u00e7\u00e3o com o function e n\u00e3o executarmos a mesma, nada que estiver dentro dela ir\u00e1 acontecer","title":"Par\u00eanteses Executa a Fun\u00e7\u00e3o"},{"location":"parte1/funcoes/#argumentos-podem-ser-funcoes","text":"Chamadas de Callback, geralmente s\u00e3o fun\u00e7\u00f5es que ocorrem ap\u00f3s algum evento. addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }); // A fun\u00e7\u00e3o possui dois argumentos // Primeiro \u00e9 a string 'click' // Segundo \u00e9 uma fun\u00e7\u00e3o an\u00f4nima Info Fun\u00e7\u00f5es an\u00f4nimas s\u00e3o aquelas em que o nome da fun\u00e7\u00e3o n\u00e3o \u00e9 definido, escritas como function() {} ou () => {}","title":"Argumentos Podem ser Fun\u00e7\u00f5es"},{"location":"parte1/funcoes/#pode-ou-nao-retornar-um-valor","text":"Quando n\u00e3o definimos o return, ela ir\u00e1 retornar undefined . O c\u00f3digo interno da fun\u00e7\u00e3o \u00e9 executado normalmente, independente de existir valor de return ou n\u00e3o. function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); } imc ( 80 , 1.80 ); // retorna o imc console . log ( imc ( 80 , 1.80 )); // retorna o imc e undefined","title":"Pode ou n\u00e3o retornar um valor"},{"location":"parte1/funcoes/#valores-retornados","text":"Uma fun\u00e7\u00e3o pode retornar qualquer tipo de dado e at\u00e9 outras fun\u00e7\u00f5es. function terceiraIdade ( idade ) { if ( typeof idade !== 'number' ) { return 'Informe a sua idade!' ; } else if ( idade >= 60 ) { return true ; } else { return false ; } } Cuidado Retornar diferentes tipos de dados na mesma fun\u00e7\u00e3o n\u00e3o \u00e9 uma boa ideia.","title":"Valores Retornados"},{"location":"parte1/funcoes/#escopo","text":"Vari\u00e1veis e fun\u00e7\u00f5es definidas dentro de um bloco {} {}, n\u00e3o s\u00e3o vis\u00edveis fora dele. function precisoVisitar ( paisesVisitados ) { var totalPaises = 193 ; return `Ainda faltam ${ totalPaises - paisesVisitados } paises para visitar` } console . log ( totalPaises ); // erro, totalPaises n\u00e3o definido","title":"Escopo"},{"location":"parte1/funcoes/#escopo-lexico","text":"Fun\u00e7\u00f5es conseguem acessar vari\u00e1veis que foram criadas no contexto pai var profissao = 'Designer' ; function dados () { var nome = 'Andr\u00e9' ; var idade = 28 ; function outrosDados () { var endereco = 'Rio de Janeiro' ; var idade = 29 ; return ` ${ nome } , ${ idade } , ${ endereco } , ${ profissao } ` ; } return outrosDados (); } dados (); // Retorna 'Andr\u00e9, 29, Rio de Janeiro, Designer' outrosDados (); // retorna um erro","title":"Escopo L\u00e9xico"},{"location":"parte1/funcoes/#hoisting","text":"Antes de executar uma fun\u00e7\u00e3o, o JS 'move' todas as fun\u00e7\u00f5es declaradas para a mem\u00f3ria imc ( 80 , 1.80 ); // imc aparece no console function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); }","title":"Hoisting"},{"location":"parte1/numero/","text":"N\u00fameros e Operadores N\u00fameros var idade = 28 ; var gols = 1000 ; var pi = 3.14 ; // ponto para decimal var exp = 2e10 ; // 20000000000 Operadores Aritm\u00e9ticos var soma = 100 + 50 ; // 150 var subtracao = 100 - 50 ; // 50 var multiplicacao = 100 * 2 ; // 200 var divisao = 100 / 2 ; // 50 var expoente = 2 ** 4 ; // 16 var modulo = 14 % 5 ; // 4 Lembrando A s\u00edmbolo de soma + em strings serve para concatenar Operadores Aritm\u00e9ticos (Strings) var soma = '100' + 50 ; // 10050 var subtracao = '100' - 50 ; // 50 var multiplicacao = '100' * '2' ; // 200 var divisao = 'Comprei 10' / 2 ; // NaN (Not a Number) Dica \u00c9 poss\u00edvel verificar se uma vari\u00e1vel \u00e9 NaN ou n\u00e3o com a fun\u00e7\u00e3o isNan () A ordem importa Come\u00e7a por multiplica\u00e7\u00e3o e divis\u00e3o, depois por soma e subtra\u00e7\u00e3o var total1 = 20 + 5 * 2 ; // 30 var total2 = ( 20 + 5 ) * 2 ; // 50 var total3 = 20 / 2 * 5 ; // 50 var total4 = 10 + 10 * 2 + 20 / 2 ; // 40 Nota Par\u00eanteses para priorizar uma express\u00e3o Operadores Aritm\u00e9ticos var incremento = 5 ; console . log ( incremento ++ ); // 5 console . log ( incremento ); // 6 var incremento2 = 5 ; console . log ( ++ incremento2 ); // 6 console . log ( incremento2 ); // 6 Nota Mesma coisa para o decremento -- x O + e - tenta transformar o valor seguinte em n\u00famero var frase = 'Isso \u00e9 um teste' ; + frase ; // NaN - frase ; // NaN var idade = '28' ; + idade ; // 28 (n\u00famero) - idade ; // -28 (n\u00famero) console . log ( + idade + 5 ); // 33 var possuiFaculdade = true ; console . log ( + possuiFaculdade ); // 1 Nota O - antes de um n\u00famero o torna negativo Guia completo de operadores","title":"N\u00fameros e Operadores"},{"location":"parte1/numero/#numeros-e-operadores","text":"","title":"N\u00fameros e Operadores"},{"location":"parte1/numero/#numeros","text":"var idade = 28 ; var gols = 1000 ; var pi = 3.14 ; // ponto para decimal var exp = 2e10 ; // 20000000000","title":"N\u00fameros"},{"location":"parte1/numero/#operadores-aritmeticos","text":"var soma = 100 + 50 ; // 150 var subtracao = 100 - 50 ; // 50 var multiplicacao = 100 * 2 ; // 200 var divisao = 100 / 2 ; // 50 var expoente = 2 ** 4 ; // 16 var modulo = 14 % 5 ; // 4 Lembrando A s\u00edmbolo de soma + em strings serve para concatenar","title":"Operadores Aritm\u00e9ticos"},{"location":"parte1/numero/#operadores-aritmeticos-strings","text":"var soma = '100' + 50 ; // 10050 var subtracao = '100' - 50 ; // 50 var multiplicacao = '100' * '2' ; // 200 var divisao = 'Comprei 10' / 2 ; // NaN (Not a Number) Dica \u00c9 poss\u00edvel verificar se uma vari\u00e1vel \u00e9 NaN ou n\u00e3o com a fun\u00e7\u00e3o isNan ()","title":"Operadores Aritm\u00e9ticos (Strings)"},{"location":"parte1/numero/#a-ordem-importa","text":"Come\u00e7a por multiplica\u00e7\u00e3o e divis\u00e3o, depois por soma e subtra\u00e7\u00e3o var total1 = 20 + 5 * 2 ; // 30 var total2 = ( 20 + 5 ) * 2 ; // 50 var total3 = 20 / 2 * 5 ; // 50 var total4 = 10 + 10 * 2 + 20 / 2 ; // 40 Nota Par\u00eanteses para priorizar uma express\u00e3o","title":"A ordem importa"},{"location":"parte1/numero/#operadores-aritmeticos_1","text":"var incremento = 5 ; console . log ( incremento ++ ); // 5 console . log ( incremento ); // 6 var incremento2 = 5 ; console . log ( ++ incremento2 ); // 6 console . log ( incremento2 ); // 6 Nota Mesma coisa para o decremento -- x O + e - tenta transformar o valor seguinte em n\u00famero var frase = 'Isso \u00e9 um teste' ; + frase ; // NaN - frase ; // NaN var idade = '28' ; + idade ; // 28 (n\u00famero) - idade ; // -28 (n\u00famero) console . log ( + idade + 5 ); // 33 var possuiFaculdade = true ; console . log ( + possuiFaculdade ); // 1 Nota O - antes de um n\u00famero o torna negativo Guia completo de operadores","title":"Operadores Aritm\u00e9ticos"},{"location":"parte1/objeto/","text":"Objetos Conjunto de vari\u00e1veis e fun\u00e7\u00f5es, que s\u00e3o chamadas de propriedades e m\u00e9todos. var pessoa = { nome : 'Andr\u00e9' , idade : 28 , profissao : 'Designer' , possuiFaculdade : true , } pessoa . nome ; // 'Andr\u00e9' pessoa . possuiFaculdade ; // true Note Propriedades e m\u00e9todos consistem em nome (chave) e valor M\u00e9todos \u00c9 uma propriedade que possui uma fun\u00e7\u00e3o no local do seu valor. var quadrado = { lados : 4 , area : function ( lado ) { return lado * lado ; }, perimetro : function ( lado ) { return this . lados * lado ; }, } quadrado . lados ; // 4 quadrado . area ( 5 ); // 25 quadrado . perimetro ( 5 ); // 20 Abrevia\u00e7\u00e3o de area : function () {} para area () {} , no ES6+ var quadrado = { lados : 4 , area ( lado ) { return lado * lado ; }, perimetro ( lado ) { return this . lados * lado ; }, } Organizar C\u00f3digo Objetos servem para organizar o c\u00f3digo em pequenas partes reutiliz\u00e1veis. Math . PI ; // 3.14 Math . random (); // n\u00famero aleat\u00f3rio var pi = Math . PI ; console . log ( pi ); // 3.14 Dica Math \u00e9 um objeto nativo de JavaScript. J\u00e1 percebeu que console \u00e9 um objeto e log () um m\u00e9todo? Criar um Objeto Um objeto \u00e9 criado utilizando as chaves { } var carro = {}; var pessoa = {}; console . log ( typeof carro ); // 'object' Dot Notation Get Acesse propriedades de um objeto utilizando o ponto . var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } var bg = menu . backgroundColor ; // '#84E' Dot Notation Set Substitua o valor de uma propriedade utilizando . e o = ap\u00f3s o nome da mesma. var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } menu . backgroundColor = '#000' ; console . log ( menu . backgroundColor ); // '#000' Adicionar Propriedades e M\u00e9todos Basta adicionar um novo nome e definir o valor. var menu = { width : 800 , } menu . height = 50 ; menu . position = 'fixed' ; Palavra-Chave This This ir\u00e1 fazer uma refer\u00eancia ao pr\u00f3prio objeto. var height = 120 ; var menu = { width : 800 , height : 50 , metadeHeight () { return this . height / 2 ; } } menu . metadeHeight (); // 25 // sem o this, seria 60 Info This ir\u00e1 retornar o pr\u00f3prio objeto Prot\u00f3tipo e Heren\u00e7a O objeto herda propriedades e m\u00e9todos do objeto que foi utilizado para criar o mesmo. var menu = { width : 800 , } menu . hasOwnProperty ( 'width' ) // true menu . hasOwnProperty ( 'height' ) // false Info hasOwnProperty \u00e9 um m\u00e9todo de Object Tudo \u00e9 objeto Strings, N\u00fameros, Boolean, Objetos e mais, possuem propriedades e m\u00e9todos. Por isso s\u00e3o objetos. var nome = 'Andr\u00e9' ; nome . length ; // 5 nome . charAt ( 1 ); // 'n' nome . replace ( 'r\u00e9' , 'rei' ); // 'Andrei' nome ; // 'Andr\u00e9' Info Uma string herda propriedades e m\u00e9todos do construtor String () N\u00fameros var altura = 1.8 ; altura . toString (); // '1.8' altura . toFixed (); // '2' Dica Por um breve momento o n\u00famero \u00e9 envolvido em um Objeto (coer\u00e7\u00e3o), tendo acesso assim as suas propriedades e m\u00e9todos Fun\u00e7\u00f5es function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado . toString (); //\"function areaQuadrado(lado) { // return lado * lado; //}\" areaQuadrado . length ; // 1 Elementos do DOM < a class = \"btn\" > Clique </ a > var btn = document . querySelector ( '.btn' ); btn . classList . add ( 'azul' ) // adiciona a classe azul btn . innerText ; // 'Clique' btn . addEventListener ( 'click' , function () { console . log ( 'Clicou' ) }) Info Praticamente todos os efeitos com JS s\u00e3o feitos utilizando propriedades e m\u00e9todos de objetos do DOM.","title":"Objeto"},{"location":"parte1/objeto/#objetos","text":"Conjunto de vari\u00e1veis e fun\u00e7\u00f5es, que s\u00e3o chamadas de propriedades e m\u00e9todos. var pessoa = { nome : 'Andr\u00e9' , idade : 28 , profissao : 'Designer' , possuiFaculdade : true , } pessoa . nome ; // 'Andr\u00e9' pessoa . possuiFaculdade ; // true Note Propriedades e m\u00e9todos consistem em nome (chave) e valor","title":"Objetos"},{"location":"parte1/objeto/#metodos","text":"\u00c9 uma propriedade que possui uma fun\u00e7\u00e3o no local do seu valor. var quadrado = { lados : 4 , area : function ( lado ) { return lado * lado ; }, perimetro : function ( lado ) { return this . lados * lado ; }, } quadrado . lados ; // 4 quadrado . area ( 5 ); // 25 quadrado . perimetro ( 5 ); // 20 Abrevia\u00e7\u00e3o de area : function () {} para area () {} , no ES6+ var quadrado = { lados : 4 , area ( lado ) { return lado * lado ; }, perimetro ( lado ) { return this . lados * lado ; }, }","title":"M\u00e9todos"},{"location":"parte1/objeto/#organizar-codigo","text":"Objetos servem para organizar o c\u00f3digo em pequenas partes reutiliz\u00e1veis. Math . PI ; // 3.14 Math . random (); // n\u00famero aleat\u00f3rio var pi = Math . PI ; console . log ( pi ); // 3.14 Dica Math \u00e9 um objeto nativo de JavaScript. J\u00e1 percebeu que console \u00e9 um objeto e log () um m\u00e9todo?","title":"Organizar C\u00f3digo"},{"location":"parte1/objeto/#criar-um-objeto","text":"Um objeto \u00e9 criado utilizando as chaves { } var carro = {}; var pessoa = {}; console . log ( typeof carro ); // 'object'","title":"Criar um Objeto"},{"location":"parte1/objeto/#dot-notation-get","text":"Acesse propriedades de um objeto utilizando o ponto . var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } var bg = menu . backgroundColor ; // '#84E'","title":"Dot Notation Get"},{"location":"parte1/objeto/#dot-notation-set","text":"Substitua o valor de uma propriedade utilizando . e o = ap\u00f3s o nome da mesma. var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } menu . backgroundColor = '#000' ; console . log ( menu . backgroundColor ); // '#000'","title":"Dot Notation Set"},{"location":"parte1/objeto/#adicionar-propriedades-e-metodos","text":"Basta adicionar um novo nome e definir o valor. var menu = { width : 800 , } menu . height = 50 ; menu . position = 'fixed' ;","title":"Adicionar Propriedades e M\u00e9todos"},{"location":"parte1/objeto/#palavra-chave-this","text":"This ir\u00e1 fazer uma refer\u00eancia ao pr\u00f3prio objeto. var height = 120 ; var menu = { width : 800 , height : 50 , metadeHeight () { return this . height / 2 ; } } menu . metadeHeight (); // 25 // sem o this, seria 60 Info This ir\u00e1 retornar o pr\u00f3prio objeto","title":"Palavra-Chave This"},{"location":"parte1/objeto/#prototipo-e-herenca","text":"O objeto herda propriedades e m\u00e9todos do objeto que foi utilizado para criar o mesmo. var menu = { width : 800 , } menu . hasOwnProperty ( 'width' ) // true menu . hasOwnProperty ( 'height' ) // false Info hasOwnProperty \u00e9 um m\u00e9todo de Object","title":"Prot\u00f3tipo e Heren\u00e7a"},{"location":"parte1/objeto/#tudo-e-objeto","text":"Strings, N\u00fameros, Boolean, Objetos e mais, possuem propriedades e m\u00e9todos. Por isso s\u00e3o objetos. var nome = 'Andr\u00e9' ; nome . length ; // 5 nome . charAt ( 1 ); // 'n' nome . replace ( 'r\u00e9' , 'rei' ); // 'Andrei' nome ; // 'Andr\u00e9' Info Uma string herda propriedades e m\u00e9todos do construtor String ()","title":"Tudo \u00e9 objeto"},{"location":"parte1/objeto/#numeros","text":"var altura = 1.8 ; altura . toString (); // '1.8' altura . toFixed (); // '2' Dica Por um breve momento o n\u00famero \u00e9 envolvido em um Objeto (coer\u00e7\u00e3o), tendo acesso assim as suas propriedades e m\u00e9todos","title":"N\u00fameros"},{"location":"parte1/objeto/#funcoes","text":"function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado . toString (); //\"function areaQuadrado(lado) { // return lado * lado; //}\" areaQuadrado . length ; // 1","title":"Fun\u00e7\u00f5es"},{"location":"parte1/objeto/#elementos-do-dom","text":"< a class = \"btn\" > Clique </ a > var btn = document . querySelector ( '.btn' ); btn . classList . add ( 'azul' ) // adiciona a classe azul btn . innerText ; // 'Clique' btn . addEventListener ( 'click' , function () { console . log ( 'Clicou' ) }) Info Praticamente todos os efeitos com JS s\u00e3o feitos utilizando propriedades e m\u00e9todos de objetos do DOM.","title":"Elementos do DOM"},{"location":"parte1/variaveis/","text":"Vari\u00e1veis Repons\u00e1vel por guardar dados na mem\u00f3ria Tipos de vari\u00e1veis Inicia com a palavra var , let ou const . var: N\u00e3o se utiliza mais hoje em dia let: Declarar vari\u00e1veis com escopo de bloco Const: Declarar vari\u00e1veis com const mant\u00eam seus valores var nome = 'Andr\u00e9' ; let idade = 28 ; const possuiFaculdade = true ; Sintaxe Palavra chave var , let ou const , sinal de igual e o valor Exemplo var nome = 'Andr\u00e9' ; Evitar repeti\u00e7\u00f5es var preco = 20 ; var totalComprado = 5 ; var precoTotal = preco * totalComprado ; Para evitar a repeti\u00e7\u00e3o como no caso acima, podemos separar as vari\u00e1veis por v\u00edrgula var nome = 'Andr\u00e9' , idade = 28 , possuiFaculdade = true ; Podemos declarar a vari\u00e1vel e n\u00e3o atribuir o valor inicialmente var precoAplicativo ; // retorna undefined Nome Os nomes podem iniciar com $, _ , ou letras. Podem conter n\u00fameros mas n\u00e3o iniciar com eles Case Sensitive nome \u00e9 diferente de Nome N\u00e3o utilizar palavras reservadas https://www.w3schools.com/js/js_reserved.asp Camel Case \u00c9 comum nomearmos assim: abrirModal Nome // Inv\u00e1lido var \u00a7 nome ; var function ; var 1 possuiFaculdade ; // V\u00e1lido var $selecionar ; var _nome ; var possuiFaculdadeNoExterior ; Declarar Erro ao tentar utilizar uma vari\u00e1vel que n\u00e3o foi declarada console . log ( nome ); // retorna nome is not defined Hoisting S\u00e3o movidas para cima do c\u00f3digo, por\u00e9m o valor atribu\u00eddo n\u00e3o \u00e9 movido console . log ( nome ); var nome = 'Andr\u00e9' ; // Retorna undefined var profissao = 'Designer' ; console . log ( profissao ); // Retornar Designer Mudar o valor atribu\u00eddo \u00c9 poss\u00edvel mudar os valores atribu\u00eddos a vari\u00e1veis declaradas com var e let . Por\u00e9m n\u00e3o \u00e9 poss\u00edvel modificar valores declarados com const . var idade = 28 ; idade = 29 ; let preco = 50 ; preco = 25 ; const possuiFaculdade = true ; possuiFaculdade = false ; // Retorna um erro 7 Tipos de Dados Todos s\u00e3o primitivos exceto os objetos. var nome = 'Andr\u00e9' ; // String var idade = 28 ; // Number var possuiFaculdade = true ; // Boolean var time ; // Undefined var comida = null ; // Null var simbolo = Symbol () // Symbol var novoObjeto = {} // Object Nota Primitivos s\u00e3o dados imut\u00e1veis Veriicar tipo de dado (typeof) var nome = 'Andr\u00e9' ; console . log ( typeof nome ); // retorna string Nota typeof null retorna object String Voc\u00ea pode somar uma string e assim concatenar as palavras var nome = 'Andr\u00e9' ; var sobrenome = 'Rafael' ; var nomeCompleto = nome + ' ' + sobrenome ; Voc\u00ea pode somar n\u00fameros com strings, o resultado \u00e9 sempre uma string var gols = 1000 ; var frase = 'Rom\u00e1rio fez ' + gols + ' gols' ; Aspas Duplas, Simples e Template Strig 'JavaScript \u00e9 \"super\" f\u00e1cil' ; \"JavaScript \u00e9 'super' f\u00e1cil\" ; \"JavaScript \u00e9 \\\"super\\\" f\u00e1cil\" ; `JavaScript \u00e9 \"super\" f\u00e1cil\"` ; \"JavaScript \u00e9 \" super \" f\u00e1cil\" ; // Inv\u00e1lido Dica N\u00e3o necessariamente precisamos atribuir valores a uma vari\u00e1vel Template String var gols = 1000 ; var frase1 = 'Rom\u00e1rio fez ' + gols + ' gols' ; var frase2 = `Rom\u00e1rio fez ${ gols } gols` ; // Utilizando Template String Info Voc\u00ea deve passar express\u00f5es / vari\u00e1veis dentro de $ {}","title":"Vari\u00e1veis"},{"location":"parte1/variaveis/#variaveis","text":"Repons\u00e1vel por guardar dados na mem\u00f3ria Tipos de vari\u00e1veis Inicia com a palavra var , let ou const . var: N\u00e3o se utiliza mais hoje em dia let: Declarar vari\u00e1veis com escopo de bloco Const: Declarar vari\u00e1veis com const mant\u00eam seus valores var nome = 'Andr\u00e9' ; let idade = 28 ; const possuiFaculdade = true ;","title":"Vari\u00e1veis"},{"location":"parte1/variaveis/#sintaxe","text":"Palavra chave var , let ou const , sinal de igual e o valor Exemplo var nome = 'Andr\u00e9' ;","title":"Sintaxe"},{"location":"parte1/variaveis/#evitar-repeticoes","text":"var preco = 20 ; var totalComprado = 5 ; var precoTotal = preco * totalComprado ; Para evitar a repeti\u00e7\u00e3o como no caso acima, podemos separar as vari\u00e1veis por v\u00edrgula var nome = 'Andr\u00e9' , idade = 28 , possuiFaculdade = true ; Podemos declarar a vari\u00e1vel e n\u00e3o atribuir o valor inicialmente var precoAplicativo ; // retorna undefined","title":"Evitar repeti\u00e7\u00f5es"},{"location":"parte1/variaveis/#nome","text":"Os nomes podem iniciar com $, _ , ou letras. Podem conter n\u00fameros mas n\u00e3o iniciar com eles Case Sensitive nome \u00e9 diferente de Nome N\u00e3o utilizar palavras reservadas https://www.w3schools.com/js/js_reserved.asp Camel Case \u00c9 comum nomearmos assim: abrirModal","title":"Nome"},{"location":"parte1/variaveis/#nome_1","text":"// Inv\u00e1lido var \u00a7 nome ; var function ; var 1 possuiFaculdade ; // V\u00e1lido var $selecionar ; var _nome ; var possuiFaculdadeNoExterior ;","title":"Nome"},{"location":"parte1/variaveis/#declarar","text":"Erro ao tentar utilizar uma vari\u00e1vel que n\u00e3o foi declarada console . log ( nome ); // retorna nome is not defined","title":"Declarar"},{"location":"parte1/variaveis/#hoisting","text":"S\u00e3o movidas para cima do c\u00f3digo, por\u00e9m o valor atribu\u00eddo n\u00e3o \u00e9 movido console . log ( nome ); var nome = 'Andr\u00e9' ; // Retorna undefined var profissao = 'Designer' ; console . log ( profissao ); // Retornar Designer","title":"Hoisting"},{"location":"parte1/variaveis/#mudar-o-valor-atribuido","text":"\u00c9 poss\u00edvel mudar os valores atribu\u00eddos a vari\u00e1veis declaradas com var e let . Por\u00e9m n\u00e3o \u00e9 poss\u00edvel modificar valores declarados com const . var idade = 28 ; idade = 29 ; let preco = 50 ; preco = 25 ; const possuiFaculdade = true ; possuiFaculdade = false ; // Retorna um erro","title":"Mudar o valor atribu\u00eddo"},{"location":"parte1/variaveis/#7-tipos-de-dados","text":"Todos s\u00e3o primitivos exceto os objetos. var nome = 'Andr\u00e9' ; // String var idade = 28 ; // Number var possuiFaculdade = true ; // Boolean var time ; // Undefined var comida = null ; // Null var simbolo = Symbol () // Symbol var novoObjeto = {} // Object Nota Primitivos s\u00e3o dados imut\u00e1veis","title":"7 Tipos de Dados"},{"location":"parte1/variaveis/#veriicar-tipo-de-dado-typeof","text":"var nome = 'Andr\u00e9' ; console . log ( typeof nome ); // retorna string Nota typeof null retorna object","title":"Veriicar tipo de dado (typeof)"},{"location":"parte1/variaveis/#string","text":"Voc\u00ea pode somar uma string e assim concatenar as palavras var nome = 'Andr\u00e9' ; var sobrenome = 'Rafael' ; var nomeCompleto = nome + ' ' + sobrenome ; Voc\u00ea pode somar n\u00fameros com strings, o resultado \u00e9 sempre uma string var gols = 1000 ; var frase = 'Rom\u00e1rio fez ' + gols + ' gols' ;","title":"String"},{"location":"parte1/variaveis/#aspas-duplas-simples-e-template-strig","text":"'JavaScript \u00e9 \"super\" f\u00e1cil' ; \"JavaScript \u00e9 'super' f\u00e1cil\" ; \"JavaScript \u00e9 \\\"super\\\" f\u00e1cil\" ; `JavaScript \u00e9 \"super\" f\u00e1cil\"` ; \"JavaScript \u00e9 \" super \" f\u00e1cil\" ; // Inv\u00e1lido Dica N\u00e3o necessariamente precisamos atribuir valores a uma vari\u00e1vel","title":"Aspas Duplas, Simples e Template Strig"},{"location":"parte1/variaveis/#template-string","text":"var gols = 1000 ; var frase1 = 'Rom\u00e1rio fez ' + gols + ' gols' ; var frase2 = `Rom\u00e1rio fez ${ gols } gols` ; // Utilizando Template String Info Voc\u00ea deve passar express\u00f5es / vari\u00e1veis dentro de $ {}","title":"Template String"},{"location":"parte2/classe/","text":"Classes e Atributos ClassList Retorna uma lista com as classes do elemento. Permite adicionar, remover e verificar se cont\u00e9m. const menu = document . querySelector ( '.menu' ); menu . className ; // string menu . classList ; // lista de classes menu . classList . add ( 'ativo' ); menu . classList . add ( 'ativo' , 'mobile' ); // duas classes menu . classList . remove ( 'ativo' ); menu . classList . toggle ( 'ativo' ); // adiciona/remove a classe menu . classList . contains ( 'ativo' ); // true ou false menu . classList . replace ( 'ativo' , 'inativo' ); Atributes Retorna uma array-like com os atributos do elemento. const animais = document . querySelector ( '.animais' ); animais . attributes ; // retorna todos os atributos animais . attributes [ 0 ]; // retorna o primeiro atributo GetAttribute e SetAttribute M\u00e9todos que retornam ou definem de acordo com o atributo selecionado const img = document . querySelector ( 'img' ); img . getAttribute ( 'src' ); // valor do src img . setAttribute ( 'alt' , 'Texto Alternativo' ); // muda o alt img . hasAttribute ( 'id' ); // true / false img . removeAttribute ( 'alt' ); // remove o alt img . hasAttributes (); // true / false se tem algum atributo Read Only vs Writable Existem propriedades que n\u00e3o permitem a mudan\u00e7a de seus valores, essas s\u00e3o considerados Read Only, ou seja, apenas leitura. const animais = document . querySelector ( '.animais' ); animais . className ; // string com o nome das classes animais . className = 'azul' ; // substitui completamente a string animais . className += ' vermelho' ; // adiciona vermelho \u00e0 string animais . attributes = 'class=\"ativo\"' ; // n\u00e3o funciona, read-only Info Lembre-se que podemos modificar o valor de uma propriedade objeto.propriedade = ''","title":"Classes e Atributos"},{"location":"parte2/classe/#classes-e-atributos","text":"","title":"Classes e Atributos"},{"location":"parte2/classe/#classlist","text":"Retorna uma lista com as classes do elemento. Permite adicionar, remover e verificar se cont\u00e9m. const menu = document . querySelector ( '.menu' ); menu . className ; // string menu . classList ; // lista de classes menu . classList . add ( 'ativo' ); menu . classList . add ( 'ativo' , 'mobile' ); // duas classes menu . classList . remove ( 'ativo' ); menu . classList . toggle ( 'ativo' ); // adiciona/remove a classe menu . classList . contains ( 'ativo' ); // true ou false menu . classList . replace ( 'ativo' , 'inativo' );","title":"ClassList"},{"location":"parte2/classe/#atributes","text":"Retorna uma array-like com os atributos do elemento. const animais = document . querySelector ( '.animais' ); animais . attributes ; // retorna todos os atributos animais . attributes [ 0 ]; // retorna o primeiro atributo","title":"Atributes"},{"location":"parte2/classe/#getattribute-e-setattribute","text":"M\u00e9todos que retornam ou definem de acordo com o atributo selecionado const img = document . querySelector ( 'img' ); img . getAttribute ( 'src' ); // valor do src img . setAttribute ( 'alt' , 'Texto Alternativo' ); // muda o alt img . hasAttribute ( 'id' ); // true / false img . removeAttribute ( 'alt' ); // remove o alt img . hasAttributes (); // true / false se tem algum atributo","title":"GetAttribute e SetAttribute"},{"location":"parte2/classe/#read-only-vs-writable","text":"Existem propriedades que n\u00e3o permitem a mudan\u00e7a de seus valores, essas s\u00e3o considerados Read Only, ou seja, apenas leitura. const animais = document . querySelector ( '.animais' ); animais . className ; // string com o nome das classes animais . className = 'azul' ; // substitui completamente a string animais . className += ' vermelho' ; // adiciona vermelho \u00e0 string animais . attributes = 'class=\"ativo\"' ; // n\u00e3o funciona, read-only Info Lembre-se que podemos modificar o valor de uma propriedade objeto.propriedade = ''","title":"Read Only vs Writable"},{"location":"parte2/dimensoes/","text":"Dimens\u00f5es e Dist\u00e2ncias Height e Width Estas s\u00e3o propriedades e m\u00e9todos dos objetos Element e HTMLElement , a maioria delas s\u00e3o Read Only const section = document . querySelector ( '.animais' ); section . clientHeight ; // height + padding section . offsetHeight ; // height + padding + border section . scrollHeight ; // height total, mesmo dentro de scroll Info Mesma coisa para o Width, clientWidth ... Offsettop e offsetleft const section = document . querySelector ( '.animais' ); // Dist\u00e2ncia entre o topo do elemento e o topo da p\u00e1gina section . offsetTop ; // Dist\u00e2ncia entre o canto esquerdo do elemento // e o canto esquerdo da p\u00e1gina section . offsetLeft ; GetBoudingClientRect( ) M\u00e9todo que retorna um objeto com valores de width, height, dist\u00e2ncias do elemento e mais. const section = document . querySelector ( '.animais' ); const rect = section . getBoundingClientRect (); rect . height ; // height do elemento rect . width ; // width do elemento rect . top ; // dist\u00e2ncia entre o topo do elemento e o scroll Window window . innerWidth ; // width do janela window . outerWidth ; // soma dev tools tamb\u00e9m window . innerHeight ; // height do janela window . outerHeight ; // soma a barra de endere\u00e7o window . pageYOffset ; // dist\u00e2ncia total do scroll vertical window . pageXOffset ; // dist\u00e2ncia total do scroll horizontal if ( window . innerWidth < 600 ) { console . log ( 'Tela menor que 600px' ); } MatchMedia( ) const small = window . matchMedia ( '(max-width: 600px)' ); if ( small . matches ) { console . log ( 'Tela menor que 600px' ) } else { console . log ( 'Tela maior que 600px' ) } Dica Selecione o elemento no inspetor (dom) Abra o console e digite $0 para selecionar o mesmo Os elementos selecionados anteriormente s\u00e3o $1, $2 ...","title":"Dimens\u00f5es e Dist\u00e2ncias"},{"location":"parte2/dimensoes/#dimensoes-e-distancias","text":"","title":"Dimens\u00f5es e Dist\u00e2ncias"},{"location":"parte2/dimensoes/#height-e-width","text":"Estas s\u00e3o propriedades e m\u00e9todos dos objetos Element e HTMLElement , a maioria delas s\u00e3o Read Only const section = document . querySelector ( '.animais' ); section . clientHeight ; // height + padding section . offsetHeight ; // height + padding + border section . scrollHeight ; // height total, mesmo dentro de scroll Info Mesma coisa para o Width, clientWidth ...","title":"Height e Width"},{"location":"parte2/dimensoes/#offsettop-e-offsetleft","text":"const section = document . querySelector ( '.animais' ); // Dist\u00e2ncia entre o topo do elemento e o topo da p\u00e1gina section . offsetTop ; // Dist\u00e2ncia entre o canto esquerdo do elemento // e o canto esquerdo da p\u00e1gina section . offsetLeft ;","title":"Offsettop e offsetleft"},{"location":"parte2/dimensoes/#getboudingclientrect","text":"M\u00e9todo que retorna um objeto com valores de width, height, dist\u00e2ncias do elemento e mais. const section = document . querySelector ( '.animais' ); const rect = section . getBoundingClientRect (); rect . height ; // height do elemento rect . width ; // width do elemento rect . top ; // dist\u00e2ncia entre o topo do elemento e o scroll","title":"GetBoudingClientRect( )"},{"location":"parte2/dimensoes/#window","text":"window . innerWidth ; // width do janela window . outerWidth ; // soma dev tools tamb\u00e9m window . innerHeight ; // height do janela window . outerHeight ; // soma a barra de endere\u00e7o window . pageYOffset ; // dist\u00e2ncia total do scroll vertical window . pageXOffset ; // dist\u00e2ncia total do scroll horizontal if ( window . innerWidth < 600 ) { console . log ( 'Tela menor que 600px' ); }","title":"Window"},{"location":"parte2/dimensoes/#matchmedia","text":"const small = window . matchMedia ( '(max-width: 600px)' ); if ( small . matches ) { console . log ( 'Tela menor que 600px' ) } else { console . log ( 'Tela maior que 600px' ) } Dica Selecione o elemento no inspetor (dom) Abra o console e digite $0 para selecionar o mesmo Os elementos selecionados anteriormente s\u00e3o $1, $2 ...","title":"MatchMedia( )"},{"location":"parte2/dom/","text":"Document Object Model (DOM) \u00c9 uma interface que representa documentos HTML e XML atrav\u00e9s de objetos. Com ela \u00e9 poss\u00edvel manipular a estrutura, estilo e conte\u00fado destes documentos. console . log ( window ); // window \u00e9 o objeto global do browser // possui diferentes m\u00e9todos e propriedades window . innerHeight ; // retorna a altura do browser Info Ao inspecionar elemento com o Chrome, voc\u00ea est\u00e1 vendo a representa\u00e7\u00e3o oficial do DOM. DOM Window e Document S\u00e3o os objetos principais do DOM, boa parte da manipula\u00e7\u00e3o \u00e9 feita atrav\u00e9s dos seus m\u00e9todos e propriedades. window . alert ( 'Isso \u00e9 um alerta' ); alert ( 'Isso \u00e9 um alerta' ); // Funciona document . querySelector ( 'h1' ); // Seleciona o primeiro h1 document . body ; // Retorna o body Info window \u00e9 o objeto global, por isso n\u00e3o precisamos chamar ele na frente dos seus m\u00e9todos e propriedades. Node Toda tag html \u00e9 representada pelo objeto Element e por isso herda os seus m\u00e9todos e propriedades. Element \u00e9 um tipo de objeto Node. const titulo = document . querySelector ( 'h1' ); titulo . innerText ; // retorna o texto; titulo . classList ; // retorna as classes; titulo . id ; // retorna o id; titulo . offsetHeight ; // retorna a altura do elemento; titulo . addEventListener ( 'click' , callback ); // ativa a fun\u00e7\u00e3o callback ao click no titulo","title":"O que \u00e9 DOM"},{"location":"parte2/dom/#document-object-model-dom","text":"\u00c9 uma interface que representa documentos HTML e XML atrav\u00e9s de objetos. Com ela \u00e9 poss\u00edvel manipular a estrutura, estilo e conte\u00fado destes documentos. console . log ( window ); // window \u00e9 o objeto global do browser // possui diferentes m\u00e9todos e propriedades window . innerHeight ; // retorna a altura do browser Info Ao inspecionar elemento com o Chrome, voc\u00ea est\u00e1 vendo a representa\u00e7\u00e3o oficial do DOM.","title":"Document Object Model (DOM)"},{"location":"parte2/dom/#dom","text":"","title":"DOM"},{"location":"parte2/dom/#window-e-document","text":"S\u00e3o os objetos principais do DOM, boa parte da manipula\u00e7\u00e3o \u00e9 feita atrav\u00e9s dos seus m\u00e9todos e propriedades. window . alert ( 'Isso \u00e9 um alerta' ); alert ( 'Isso \u00e9 um alerta' ); // Funciona document . querySelector ( 'h1' ); // Seleciona o primeiro h1 document . body ; // Retorna o body Info window \u00e9 o objeto global, por isso n\u00e3o precisamos chamar ele na frente dos seus m\u00e9todos e propriedades.","title":"Window e Document"},{"location":"parte2/dom/#node","text":"Toda tag html \u00e9 representada pelo objeto Element e por isso herda os seus m\u00e9todos e propriedades. Element \u00e9 um tipo de objeto Node. const titulo = document . querySelector ( 'h1' ); titulo . innerText ; // retorna o texto; titulo . classList ; // retorna as classes; titulo . id ; // retorna o id; titulo . offsetHeight ; // retorna a altura do elemento; titulo . addEventListener ( 'click' , callback ); // ativa a fun\u00e7\u00e3o callback ao click no titulo","title":"Node"},{"location":"parte2/eventos/","text":"Eventos AddEvenListener Adiciona uma fun\u00e7\u00e3o ao elemento, esta chamada de callback , que ser\u00e1 ativada assim que certo evento ocorrer neste elemento. const img = document . querySelector ( 'img' ); // elemento.addEventListener(event, callback, options) img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) Callback \u00c9 boa pr\u00e1tica separar a fun\u00e7\u00e3o de callback do addEventListener, ou seja, declarar uma fun\u00e7\u00e3o ao inv\u00e9s de passar diretamente uma fun\u00e7\u00e3o an\u00f4nima const img = document . querySelector ( 'img' ); function callback () { console . log ( 'Clicou' ); } img . addEventListener ( 'click' , callback ); // \ud83d\ude80 img . addEventListener ( 'click' , callback ()); // undefined img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) img . addEventListener ( 'click' , () => { console . log ( 'Clicou' ); }) Event O primeiro par\u00e2metro do callback \u00e9 referente ao evento que ocorreu. const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( event ); } img . addEventListener ( 'click' , callback ); Info Geralmente utilizam e como nome do par\u00e2metro Propriedades do Event const animaisLista = document . querySelector ( '.animais-lista' ); function executarCallback ( event ) { const currentTarget = event . currentTarget ; // this const target = event . target ; // onde o clique ocorreu const type = event . type ; // tipo de evento const path = event . path ; console . log ( currentTarget , target , type , path ); } animaisLista . addEventListener ( 'click' , executarCallback ); event.PreventDefault Previne o comportamento padr\u00e3o do evento no browser. No caso de um link externo, por exemplo, ir\u00e1 previnir que o link seja ativado. const linkExterno = document . querySelector ( 'a[href^=\"http\"]' ); function clickNoLink ( event ) { event . preventDefault (); console . log ( event . currentTarget . href ); } linkExterno . addEventListener ( 'click' , clickNoLink ); This A palavra chave this \u00e9 uma palavra especial de JavaScript, que pode fazer refer\u00eancia a diferentes objetos dependendo do contexto. No caso de eventos, ela far\u00e1 refer\u00eancia ao elemento em que addEventListener foi adicionado. const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( this ); // retorna a imagem console . log ( this . getAttribute ( 'src' )); } img . addEventListener ( 'click' , callback ); Info Geralmente igual ao event.currentTarget Diferentes Eventos Existem diversos eventos como click , scroll , resize , keydown , keyup , mouseenter e mais. Eventos podem ser adicionados a diferentes elementos, como o window e document tamb\u00e9m. const h1 = document . querySelector ( 'h1' ); function callback ( event ) { console . log ( event . type , event ); } h1 . addEventListener ( 'click' , callback ); h1 . addEventListener ( 'mouseenter' , callback ); window . addEventListener ( 'scroll' , callback ); window . addEventListener ( 'resize' , callback ); window . addEventListener ( 'keydown' , callback ); Keyboard Voc\u00ea pode adicionar atalhos para facilitar a navega\u00e7\u00e3o no seu site, atrav\u00e9s de eventos do keyboard . function handleKeyboard ( event ) { if ( event . key === 'a' ) document . body . classList . toggle ( 'azul' ); else if ( event . key === 'v' ) document . body . classList . toggle ( 'vermelho' ); } window . addEventListener ( 'keydown' , handleKeyboard ); forEach e Eventos O m\u00e9todo addEventListener \u00e9 adicionado \u00e0 um \u00fanico elemento, ent\u00e3o \u00e9 necess\u00e1rio um loop entre elementos de uma lista, para adicionarmos \u00e0 cada um deles. const imgs = document . querySelectorAll ( 'img' ); function imgSrc ( event ) { const src = event . currentTarget . getAttribute ( 'src' ); console . log ( src ); } imgs . forEach (( img ) => { img . addEventListener ( 'click' , imgSrc ); });","title":"Evento"},{"location":"parte2/eventos/#eventos","text":"","title":"Eventos"},{"location":"parte2/eventos/#addevenlistener","text":"Adiciona uma fun\u00e7\u00e3o ao elemento, esta chamada de callback , que ser\u00e1 ativada assim que certo evento ocorrer neste elemento. const img = document . querySelector ( 'img' ); // elemento.addEventListener(event, callback, options) img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); })","title":"AddEvenListener"},{"location":"parte2/eventos/#callback","text":"\u00c9 boa pr\u00e1tica separar a fun\u00e7\u00e3o de callback do addEventListener, ou seja, declarar uma fun\u00e7\u00e3o ao inv\u00e9s de passar diretamente uma fun\u00e7\u00e3o an\u00f4nima const img = document . querySelector ( 'img' ); function callback () { console . log ( 'Clicou' ); } img . addEventListener ( 'click' , callback ); // \ud83d\ude80 img . addEventListener ( 'click' , callback ()); // undefined img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) img . addEventListener ( 'click' , () => { console . log ( 'Clicou' ); })","title":"Callback"},{"location":"parte2/eventos/#event","text":"O primeiro par\u00e2metro do callback \u00e9 referente ao evento que ocorreu. const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( event ); } img . addEventListener ( 'click' , callback ); Info Geralmente utilizam e como nome do par\u00e2metro","title":"Event"},{"location":"parte2/eventos/#propriedades-do-event","text":"const animaisLista = document . querySelector ( '.animais-lista' ); function executarCallback ( event ) { const currentTarget = event . currentTarget ; // this const target = event . target ; // onde o clique ocorreu const type = event . type ; // tipo de evento const path = event . path ; console . log ( currentTarget , target , type , path ); } animaisLista . addEventListener ( 'click' , executarCallback );","title":"Propriedades do Event"},{"location":"parte2/eventos/#eventpreventdefault","text":"Previne o comportamento padr\u00e3o do evento no browser. No caso de um link externo, por exemplo, ir\u00e1 previnir que o link seja ativado. const linkExterno = document . querySelector ( 'a[href^=\"http\"]' ); function clickNoLink ( event ) { event . preventDefault (); console . log ( event . currentTarget . href ); } linkExterno . addEventListener ( 'click' , clickNoLink );","title":"event.PreventDefault"},{"location":"parte2/eventos/#this","text":"A palavra chave this \u00e9 uma palavra especial de JavaScript, que pode fazer refer\u00eancia a diferentes objetos dependendo do contexto. No caso de eventos, ela far\u00e1 refer\u00eancia ao elemento em que addEventListener foi adicionado. const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( this ); // retorna a imagem console . log ( this . getAttribute ( 'src' )); } img . addEventListener ( 'click' , callback ); Info Geralmente igual ao event.currentTarget","title":"This"},{"location":"parte2/eventos/#diferentes-eventos","text":"Existem diversos eventos como click , scroll , resize , keydown , keyup , mouseenter e mais. Eventos podem ser adicionados a diferentes elementos, como o window e document tamb\u00e9m. const h1 = document . querySelector ( 'h1' ); function callback ( event ) { console . log ( event . type , event ); } h1 . addEventListener ( 'click' , callback ); h1 . addEventListener ( 'mouseenter' , callback ); window . addEventListener ( 'scroll' , callback ); window . addEventListener ( 'resize' , callback ); window . addEventListener ( 'keydown' , callback );","title":"Diferentes Eventos"},{"location":"parte2/eventos/#keyboard","text":"Voc\u00ea pode adicionar atalhos para facilitar a navega\u00e7\u00e3o no seu site, atrav\u00e9s de eventos do keyboard . function handleKeyboard ( event ) { if ( event . key === 'a' ) document . body . classList . toggle ( 'azul' ); else if ( event . key === 'v' ) document . body . classList . toggle ( 'vermelho' ); } window . addEventListener ( 'keydown' , handleKeyboard );","title":"Keyboard"},{"location":"parte2/eventos/#foreach-e-eventos","text":"O m\u00e9todo addEventListener \u00e9 adicionado \u00e0 um \u00fanico elemento, ent\u00e3o \u00e9 necess\u00e1rio um loop entre elementos de uma lista, para adicionarmos \u00e0 cada um deles. const imgs = document . querySelectorAll ( 'img' ); function imgSrc ( event ) { const src = event . currentTarget . getAttribute ( 'src' ); console . log ( src ); } imgs . forEach (( img ) => { img . addEventListener ( 'click' , imgSrc ); });","title":"forEach e Eventos"},{"location":"parte2/foreach/","text":"forEach e Arrow Function forEach Constantemente vamos selecionar uma lista de itens do dom. A melhor forma para interagirmos com os mesmos \u00e9 utilizando o m\u00e9todo forEach. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( item ){ console . log ( item ); }); Par\u00e2metros do forEach O primeiro par\u00e2metro \u00e9 o callback, ou seja, a fun\u00e7\u00e3o que ser\u00e1 ativada a cada item. Esse fun\u00e7\u00e3o pode receber tr\u00eas par\u00e2metros: valorAtual, index e array; const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( valorAtual , index , array ){ console . log ( item ); // o item atual no loop console . log ( index ); // o n\u00famero do index console . log ( array ); // a Array completa }); forEach e Array forEach \u00e9 um m\u00e9todo de Array, alguns objetos array-like possuem este m\u00e9todo. Caso n\u00e3o possua, o ideal \u00e9 transform\u00e1-los em uma array. const titulos = document . getElementsByClassName ( 'titulo' ); const titulosArray = Array . from ( titulos ); titulosArray . forEach ( function ( item ){ console . log ( item ); }); Arrow Function Sintaxe curta em rela\u00e7\u00e3o a function expression . Basta remover a palavra chave function e adicionar a fat arrow => ap\u00f3s os argumentos. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach (( item ) => { console . log ( item ); }); Par\u00e2metros e Par\u00eanteses const imgs = document . querySelectorAll ( 'img' ); // par\u00e2metro \u00fanico n\u00e3o precisa de par\u00eanteses imgs . forEach ( item => { console . log ( item ); }); // multiplos par\u00e2metros precisam de par\u00eanteses imgs . forEach (( item , index ) => { console . log ( item , index ); }); // sem par\u00e2metro precisa dos par\u00eanteses, mesmo vazio let i = 0 ; imgs . forEach (() => { console . log ( i ++ ); }); Return \u00c9 poss\u00edvel omitir as chaves {} para uma fun\u00e7\u00e3o que retorna uma linha. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item => console . log ( item ) ); imgs . forEach ( item => console . log ( item )); Warning N\u00e3o \u00e9 permitido fechar a linha com ;","title":"forEach e ArrowFunction"},{"location":"parte2/foreach/#foreach-e-arrow-function","text":"","title":"forEach e Arrow Function"},{"location":"parte2/foreach/#foreach","text":"Constantemente vamos selecionar uma lista de itens do dom. A melhor forma para interagirmos com os mesmos \u00e9 utilizando o m\u00e9todo forEach. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( item ){ console . log ( item ); });","title":"forEach"},{"location":"parte2/foreach/#parametros-do-foreach","text":"O primeiro par\u00e2metro \u00e9 o callback, ou seja, a fun\u00e7\u00e3o que ser\u00e1 ativada a cada item. Esse fun\u00e7\u00e3o pode receber tr\u00eas par\u00e2metros: valorAtual, index e array; const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( valorAtual , index , array ){ console . log ( item ); // o item atual no loop console . log ( index ); // o n\u00famero do index console . log ( array ); // a Array completa });","title":"Par\u00e2metros do forEach"},{"location":"parte2/foreach/#foreach-e-array","text":"forEach \u00e9 um m\u00e9todo de Array, alguns objetos array-like possuem este m\u00e9todo. Caso n\u00e3o possua, o ideal \u00e9 transform\u00e1-los em uma array. const titulos = document . getElementsByClassName ( 'titulo' ); const titulosArray = Array . from ( titulos ); titulosArray . forEach ( function ( item ){ console . log ( item ); });","title":"forEach e Array"},{"location":"parte2/foreach/#arrow-function","text":"Sintaxe curta em rela\u00e7\u00e3o a function expression . Basta remover a palavra chave function e adicionar a fat arrow => ap\u00f3s os argumentos. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach (( item ) => { console . log ( item ); });","title":"Arrow Function"},{"location":"parte2/foreach/#parametros-e-parenteses","text":"const imgs = document . querySelectorAll ( 'img' ); // par\u00e2metro \u00fanico n\u00e3o precisa de par\u00eanteses imgs . forEach ( item => { console . log ( item ); }); // multiplos par\u00e2metros precisam de par\u00eanteses imgs . forEach (( item , index ) => { console . log ( item , index ); }); // sem par\u00e2metro precisa dos par\u00eanteses, mesmo vazio let i = 0 ; imgs . forEach (() => { console . log ( i ++ ); });","title":"Par\u00e2metros e Par\u00eanteses"},{"location":"parte2/foreach/#return","text":"\u00c9 poss\u00edvel omitir as chaves {} para uma fun\u00e7\u00e3o que retorna uma linha. const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item => console . log ( item ) ); imgs . forEach ( item => console . log ( item )); Warning N\u00e3o \u00e9 permitido fechar a linha com ;","title":"Return"},{"location":"parte2/navegacao/","text":"Navega\u00e7\u00e3o por Tabs Adicionar Classe para Manipula\u00e7\u00e3o A ideia de navega\u00e7\u00e3o por tabs, \u00e9 ter uma lista de itens que controla a visualiza\u00e7\u00e3o de uma lista de conte\u00fado. Cada item da lista possui um conte\u00fado relacionado ao mesmo. <!-- Primeiro, adicionar classes que ir\u00e3o facilitar a manipula\u00e7\u00e3o dos elementos --> < ul class = \"animais-lista js-tabmenu\" > ... </ ul > < div class = \"animais-descricao js-tabcontent\" > ... </ div > Selecionar os Itens const tabMenu = document . querySelectorAll ( '.js-tabmenu li' ); const tabContent = document . querySelectorAll ( '.js-tabmenu section' ); Fun\u00e7\u00e3o Callback Recebe index como par\u00e2metro para ativar a tab. Sempre que ativar, remove a classe ativo de todos os outros elementos. function activeTab ( index ) { tabContent . forEach (( content ) => { content . classList . remove ( 'ativo' ); }); tabContent [ index ]. classList . add ( 'ativo' ); } Adicionar Evento tabMenu . forEach (( itemMenu , index ) => { itemMenu . addEventListener ( 'click' , () => { activeTab ( index ); }); }); Adicionar a classe ativo ao primeiro elemento e adicionar a classe js ao html. Assim identificamos se o JavaScript est\u00e1 habilitado ou n\u00e3o. <!-- No head do borwser --> < script > document . documentElement . className += ' js' ;</ script > // Verificar se existe elemento em tabContent e tabMenu if ( tabContent . length && tabMenu . length ) { tabContent [ 0 ]. classList . add ( 'ativo' ); ... } Anima\u00e7\u00e3o com CSS Anima\u00e7\u00e3o simples com css, sai de display none para display block. . js . js-tabcontent section { display : none ; } . js-tabcontent section . ativo { display : block !important ; animation : show .5 s forwards ; } @ keyframes show { from { opacity : 0 ; transform : translate3d ( -30px , 0 , 0 ); } to { opacity : 1 ; transform : translate3d ( 0 px , 0 , 0 ); } } Info Lembre-se, o display none remove o texto at\u00e9 dos leitores de tela (acessibilidade)","title":"Navega\u00e7\u00e3o por Tabs"},{"location":"parte2/navegacao/#navegacao-por-tabs","text":"","title":"Navega\u00e7\u00e3o por Tabs"},{"location":"parte2/navegacao/#adicionar-classe-para-manipulacao","text":"A ideia de navega\u00e7\u00e3o por tabs, \u00e9 ter uma lista de itens que controla a visualiza\u00e7\u00e3o de uma lista de conte\u00fado. Cada item da lista possui um conte\u00fado relacionado ao mesmo. <!-- Primeiro, adicionar classes que ir\u00e3o facilitar a manipula\u00e7\u00e3o dos elementos --> < ul class = \"animais-lista js-tabmenu\" > ... </ ul > < div class = \"animais-descricao js-tabcontent\" > ... </ div >","title":"Adicionar Classe para Manipula\u00e7\u00e3o"},{"location":"parte2/navegacao/#selecionar-os-itens","text":"const tabMenu = document . querySelectorAll ( '.js-tabmenu li' ); const tabContent = document . querySelectorAll ( '.js-tabmenu section' );","title":"Selecionar os Itens"},{"location":"parte2/navegacao/#funcao-callback","text":"Recebe index como par\u00e2metro para ativar a tab. Sempre que ativar, remove a classe ativo de todos os outros elementos. function activeTab ( index ) { tabContent . forEach (( content ) => { content . classList . remove ( 'ativo' ); }); tabContent [ index ]. classList . add ( 'ativo' ); }","title":"Fun\u00e7\u00e3o Callback"},{"location":"parte2/navegacao/#adicionar-evento","text":"tabMenu . forEach (( itemMenu , index ) => { itemMenu . addEventListener ( 'click' , () => { activeTab ( index ); }); }); Adicionar a classe ativo ao primeiro elemento e adicionar a classe js ao html. Assim identificamos se o JavaScript est\u00e1 habilitado ou n\u00e3o. <!-- No head do borwser --> < script > document . documentElement . className += ' js' ;</ script > // Verificar se existe elemento em tabContent e tabMenu if ( tabContent . length && tabMenu . length ) { tabContent [ 0 ]. classList . add ( 'ativo' ); ... }","title":"Adicionar Evento"},{"location":"parte2/navegacao/#animacao-com-css","text":"Anima\u00e7\u00e3o simples com css, sai de display none para display block. . js . js-tabcontent section { display : none ; } . js-tabcontent section . ativo { display : block !important ; animation : show .5 s forwards ; } @ keyframes show { from { opacity : 0 ; transform : translate3d ( -30px , 0 , 0 ); } to { opacity : 1 ; transform : translate3d ( 0 px , 0 , 0 ); } } Info Lembre-se, o display none remove o texto at\u00e9 dos leitores de tela (acessibilidade)","title":"Anima\u00e7\u00e3o com CSS"},{"location":"parte2/selecao/","text":"Sele\u00e7\u00e3o de Elementos ID getElementById seleciona e retorna elementos do DOM // Seleciona pelo ID const animaisSection = document . getElementById ( 'animais' ); const contatoSection = document . getElementById ( 'contato' ); // Retorna null caso n\u00e3o exista const naoExiste = document . getElementById ( 'teste' ); Classe e Tag getElementsByClassName e getElementsByTagName selecionam e retornam uma lista de elementos do DOM. A lista retornada est\u00e1 ao vivo, significa que se elementos forem adicionados, ela ser\u00e1 automaticamente atualizada. // Seleciona pela classe, retorna uma HTMLCollection const gridSection = document . getElementsByClassName ( 'grid-section' ); const contato = document . getElementsByClassName ( 'grid-section contato' ); // Seleciona todas as UL's, retorna uma HTMLCollection const ul = document . getElementsByTagName ( 'ul' ); // Retorna o primeiro elemento console . log ( gridSection [ 0 ]); Seletor Geral \u00danico querySelector retorna o primeiro elemento que combinar com o seu seletor CSS. const animais = document . querySelector ( '.animais' ); const contato = document . querySelector ( '#contato' ); const ultimoItem = document . querySelector ( '.animais-lista li:last-child' ); const linkCSS = document . querySelector ( '[href^=\"https://\"]' ); const primeiroUl = document . querySelector ( 'ul' ); // Busca dentro do Ul apenas const navItem = primeiroUl . querySelector ( 'li' ); Seletor Geral Lista querySelectorAll retorna todos os elementos compat\u00edveis com o seletor CSS em uma NodeList const gridSection = document . querySelectorAll ( '.grid-section' ); const listas = document . querySelectorAll ( 'ul' ); const titulos = document . querySelectorAll ( '.titulo' ); const fotosAnimais = document . querySelectorAll ( '.animais-lista img' ); // Retorna o segundo elemento console . log ( gridSection [ 1 ]); Info Diferente do getElementsByClassName, a lista aqui \u00e9 est\u00e1tica HTML Collection vs Node List A diferen\u00e7a est\u00e1 nos m\u00e9todos e propriedades de ambas. Al\u00e9m disso a NodeList retornada com querySelectorAll \u00e9 est\u00e1tica. const titulo = document . querySelector ( '.titulo' ); const gridSectionHTML = document . getElementsByClassName ( 'grid-section' ); const gridSectionNode = document . querySelectorAll ( '.grid-section' ); titulo . classList . add ( 'grid-section' ); console . log ( gridSectionHTML ); // 4 itens console . log ( gridSectionNode ); // 3 itens Array-Like HTMLCollection e NodeList s\u00e3o array-like, parecem uma array mas n\u00e3o s\u00e3o. O m\u00e9todo de Array forEach() por exemplo, existe apenas em NodeList. const gridSection = document.querySelectorAll('.grid-section'); gridSection . forEach ( function ( gridItem , index , array ) { gridItem . classList . add ( 'azul' ); console . log ( index ) // index do item na array console . log ( array ) // a array completa }); Dica \u00c9 poss\u00edvel transformar array-like em uma Array real, utilizando o m\u00e9todo Array.from (gridSection)","title":"Sele\u00e7\u00e3o de Elementos"},{"location":"parte2/selecao/#selecao-de-elementos","text":"","title":"Sele\u00e7\u00e3o de Elementos"},{"location":"parte2/selecao/#id","text":"getElementById seleciona e retorna elementos do DOM // Seleciona pelo ID const animaisSection = document . getElementById ( 'animais' ); const contatoSection = document . getElementById ( 'contato' ); // Retorna null caso n\u00e3o exista const naoExiste = document . getElementById ( 'teste' );","title":"ID"},{"location":"parte2/selecao/#classe-e-tag","text":"getElementsByClassName e getElementsByTagName selecionam e retornam uma lista de elementos do DOM. A lista retornada est\u00e1 ao vivo, significa que se elementos forem adicionados, ela ser\u00e1 automaticamente atualizada. // Seleciona pela classe, retorna uma HTMLCollection const gridSection = document . getElementsByClassName ( 'grid-section' ); const contato = document . getElementsByClassName ( 'grid-section contato' ); // Seleciona todas as UL's, retorna uma HTMLCollection const ul = document . getElementsByTagName ( 'ul' ); // Retorna o primeiro elemento console . log ( gridSection [ 0 ]);","title":"Classe e Tag"},{"location":"parte2/selecao/#seletor-geral-unico","text":"querySelector retorna o primeiro elemento que combinar com o seu seletor CSS. const animais = document . querySelector ( '.animais' ); const contato = document . querySelector ( '#contato' ); const ultimoItem = document . querySelector ( '.animais-lista li:last-child' ); const linkCSS = document . querySelector ( '[href^=\"https://\"]' ); const primeiroUl = document . querySelector ( 'ul' ); // Busca dentro do Ul apenas const navItem = primeiroUl . querySelector ( 'li' );","title":"Seletor Geral \u00danico"},{"location":"parte2/selecao/#seletor-geral-lista","text":"querySelectorAll retorna todos os elementos compat\u00edveis com o seletor CSS em uma NodeList const gridSection = document . querySelectorAll ( '.grid-section' ); const listas = document . querySelectorAll ( 'ul' ); const titulos = document . querySelectorAll ( '.titulo' ); const fotosAnimais = document . querySelectorAll ( '.animais-lista img' ); // Retorna o segundo elemento console . log ( gridSection [ 1 ]); Info Diferente do getElementsByClassName, a lista aqui \u00e9 est\u00e1tica","title":"Seletor Geral Lista"},{"location":"parte2/selecao/#html-collection-vs-node-list","text":"A diferen\u00e7a est\u00e1 nos m\u00e9todos e propriedades de ambas. Al\u00e9m disso a NodeList retornada com querySelectorAll \u00e9 est\u00e1tica. const titulo = document . querySelector ( '.titulo' ); const gridSectionHTML = document . getElementsByClassName ( 'grid-section' ); const gridSectionNode = document . querySelectorAll ( '.grid-section' ); titulo . classList . add ( 'grid-section' ); console . log ( gridSectionHTML ); // 4 itens console . log ( gridSectionNode ); // 3 itens","title":"HTML Collection vs Node List"},{"location":"parte2/selecao/#array-like","text":"HTMLCollection e NodeList s\u00e3o array-like, parecem uma array mas n\u00e3o s\u00e3o. O m\u00e9todo de Array forEach() por exemplo, existe apenas em NodeList. const gridSection = document.querySelectorAll('.grid-section'); gridSection . forEach ( function ( gridItem , index , array ) { gridItem . classList . add ( 'azul' ); console . log ( index ) // index do item na array console . log ( array ) // a array completa }); Dica \u00c9 poss\u00edvel transformar array-like em uma Array real, utilizando o m\u00e9todo Array.from (gridSection)","title":"Array-Like"},{"location":"parte2/traversing/","text":"Traversing e Manipula\u00e7\u00e3o outerHTML, innerHTML, innerTEXT Propriedades que retornam uma string contendo o html ou texto. \u00c9 poss\u00edvel atribuir um novo valor para as mesmas element.innerText = 'Novo Texto'. const menu = document . querySelector ( '.menu' ); menu . outerHTML ; // todo o html do elemento menu . innerHTML ; // html interno menu . innerText ; // texto, sem tags menu . innerText = '<p>Texto</p>' ; // a tag vai como texto menu . innerHTML = '<p>Texto</p>' ; // a tag \u00e9 renderizada Traversing Como navegar pelo DOM, utilizando suas propriedades e m\u00e9todos. const lista = document . querySelector ( '.animais-lista' ); lista . parentElement ; // pai lista . parentElement . parentElement ; // pai do pai lista . previousElementSibling ; // elemento acima lista . nextElementSibling ; // elemento abaixo lista . children ; // HTMLCollection com os filhos lista . children [ 0 ]; // primeiro filho lista . children [ -- lista . children . length ]; // \u00faltimo filho lista . querySelectorAll ( 'li' ); // todas as LI's lista . querySelector ( 'li:last-child' ); // \u00faltimo filho Element vs Node Element's represetam um elemento html, ou seja, uma tag. Node representa um n\u00f3, e pode ser um elemento (Element), texto, coment\u00e1rio, quebra de linha e mais. const lista = document . querySelector ( '.animais-lista' ); lista . previousElementSibling ; // elemento acima lista . previousSibling ; // node acima lista . firstChild ; // primeiro node child lista . childNodes ; // todos os node child Info Geralmente estamos atr\u00e1s de um elemento e n\u00e3o de qualquer node em si. Manipulando Elementos \u00c9 poss\u00edvel mover elementos no dom com m\u00e9todos de Node. const lista = document . querySelector ( '.animais-lista' ); const contato = document . querySelector ( '.contato' ); const titulo = contato . querySelector ( '.titulo' ); contato . appendChild ( lista ); // move lista para o final de contato contato . insertBefore ( lista , titulo ); // insere a lista antes de titulo contato . removeChild ( titulo ); // remove titulo de contato contato . replaceChild ( lista , titulo ); // substitui titulo por lista Novos Elementos Podemos criar novos elementos com o m\u00e9todo createElement() const animais = document . querySelector ( '.animais' ); const novoH1 = document . createElement ( 'h1' ); novoH1 . innerText = 'Novo T\u00edtulo' ; novoH1 . classList . add ( 'titulo' ); animais . appendChild ( novoH1 ); Clonar Elementos Todo elemento selecionado \u00e9 \u00fanico. Para criarmos um novo elemento baseado no anterior, \u00e9 necess\u00e1rio utilizar o m\u00e9todo cloneNode() const titulo = document . querySelector ( 'h1' ); const titulo2 = document . querySelector ( 'h1' ); const novoTitulo = titulo ; // titulo, titulo2 e novoTitulo s\u00e3o iguais const cloneTitulo = titulo . cloneNode ( true ); const contato = document . querySelector ( '.contato' ); contato . appendChild ( cloneTitulo ); Info true sinaliza para incluir os filhos","title":"Traversing e Manipula\u00e7\u00e3o"},{"location":"parte2/traversing/#traversing-e-manipulacao","text":"","title":"Traversing e Manipula\u00e7\u00e3o"},{"location":"parte2/traversing/#outerhtml-innerhtml-innertext","text":"Propriedades que retornam uma string contendo o html ou texto. \u00c9 poss\u00edvel atribuir um novo valor para as mesmas element.innerText = 'Novo Texto'. const menu = document . querySelector ( '.menu' ); menu . outerHTML ; // todo o html do elemento menu . innerHTML ; // html interno menu . innerText ; // texto, sem tags menu . innerText = '<p>Texto</p>' ; // a tag vai como texto menu . innerHTML = '<p>Texto</p>' ; // a tag \u00e9 renderizada","title":"outerHTML, innerHTML, innerTEXT"},{"location":"parte2/traversing/#traversing","text":"Como navegar pelo DOM, utilizando suas propriedades e m\u00e9todos. const lista = document . querySelector ( '.animais-lista' ); lista . parentElement ; // pai lista . parentElement . parentElement ; // pai do pai lista . previousElementSibling ; // elemento acima lista . nextElementSibling ; // elemento abaixo lista . children ; // HTMLCollection com os filhos lista . children [ 0 ]; // primeiro filho lista . children [ -- lista . children . length ]; // \u00faltimo filho lista . querySelectorAll ( 'li' ); // todas as LI's lista . querySelector ( 'li:last-child' ); // \u00faltimo filho","title":"Traversing"},{"location":"parte2/traversing/#element-vs-node","text":"Element's represetam um elemento html, ou seja, uma tag. Node representa um n\u00f3, e pode ser um elemento (Element), texto, coment\u00e1rio, quebra de linha e mais. const lista = document . querySelector ( '.animais-lista' ); lista . previousElementSibling ; // elemento acima lista . previousSibling ; // node acima lista . firstChild ; // primeiro node child lista . childNodes ; // todos os node child Info Geralmente estamos atr\u00e1s de um elemento e n\u00e3o de qualquer node em si.","title":"Element vs Node"},{"location":"parte2/traversing/#manipulando-elementos","text":"\u00c9 poss\u00edvel mover elementos no dom com m\u00e9todos de Node. const lista = document . querySelector ( '.animais-lista' ); const contato = document . querySelector ( '.contato' ); const titulo = contato . querySelector ( '.titulo' ); contato . appendChild ( lista ); // move lista para o final de contato contato . insertBefore ( lista , titulo ); // insere a lista antes de titulo contato . removeChild ( titulo ); // remove titulo de contato contato . replaceChild ( lista , titulo ); // substitui titulo por lista","title":"Manipulando Elementos"},{"location":"parte2/traversing/#novos-elementos","text":"Podemos criar novos elementos com o m\u00e9todo createElement() const animais = document . querySelector ( '.animais' ); const novoH1 = document . createElement ( 'h1' ); novoH1 . innerText = 'Novo T\u00edtulo' ; novoH1 . classList . add ( 'titulo' ); animais . appendChild ( novoH1 );","title":"Novos Elementos"},{"location":"parte2/traversing/#clonar-elementos","text":"Todo elemento selecionado \u00e9 \u00fanico. Para criarmos um novo elemento baseado no anterior, \u00e9 necess\u00e1rio utilizar o m\u00e9todo cloneNode() const titulo = document . querySelector ( 'h1' ); const titulo2 = document . querySelector ( 'h1' ); const novoTitulo = titulo ; // titulo, titulo2 e novoTitulo s\u00e3o iguais const cloneTitulo = titulo . cloneNode ( true ); const contato = document . querySelector ( '.contato' ); contato . appendChild ( cloneTitulo ); Info true sinaliza para incluir os filhos","title":"Clonar Elementos"}]}